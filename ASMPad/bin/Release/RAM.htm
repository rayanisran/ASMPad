<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
<html><head>

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1;charset=windows-1252">
<link href="ROM_files/smw00000.css" type="text/css" rel="stylesheet">



<style type="text/css">#cse-search-box input.box { color: #000000; } #paypal-donate-form input { background-color: transparent; }</style><title>SMW Central - RAM Map</title>

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="http://www.smwcentral.net/html/smw.css" type="text/css" rel="stylesheet">
<style type="text/css">#cse-search-box input.box { color: #000000; } #paypal-donate-form input { background-color: transparent; }</style>

</head>
<body text="#FFFFFF" link="#99FF99" alink="#99FF99" vlink="#99FF99">

                <td width="16" style="background-image: url('http://smwcentral.net/images/tree_left.gif');"></td>

                <td class="pad text">
<table cellpadding="0" class="brdr">
<tr><td colspan="4" class="title border center">RAM Addresses</td></tr>


<tr><td class="normal border nowrap">$7E:0000</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Scratch RAM, is and can be used for multiple purposes. (Temporarily preserving a value)<br>
In SMW (and LM ASM hacks), it includes, but is not excluded to:<br>
$7E0000 - Xpos Used For Sprite Creation, Low Byte<br>
$7E0001 - Ypos Used For Sprite Creation, Low Byte<br>
$7E0003 - Block # from LM Map16 Editor<br>
$7E0004 - Sprite GFX table - Used for when uploading sprite GFX files to VRAM, also used as high byte for block number<br>
$7E0008	- Xpos Used For Sprite Creation, High Byte<br>
$7E0009	- Ypos Used For Sprite Creation, High Byte<br>
$7E000E	- Used by the game to store the level number briefly while deciding which Level and Sprite Pointers to use (during Overworld-&gt;Level transitions).</td></tr>
<tr><td class="normal border nowrap">$7E:0010</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">If value is != #$00, run the actual game (otherwise, loop forever). Is set to a non-zero value during NMI.</td></tr>
<tr><td class="normal border nowrap">$7E:0011</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Used to distinguish IRQ #1 from IRQ #2's code. (Inside the Morton/Ludwig/Roy room, although it can be used in other areas that run IRQ as well.) #$00 = IRQ #1, #$01 = IRQ #2.</td></tr>
<tr><td class="normal border nowrap">$7E:0012</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Graphics</td><td class="normal border">Image loader (Value must be divisible by 3).<br>
Valid values:<br>
00 - default, uploads from $7F837D<br>
03 - Title screen<br>
06 - Overworld border<br>
09 - Remove text box<br>
0C - Continue? menu<br>
0F - Cinema BG: Cookie Mountain<br>
12 - 1 or 2 Players? menu<br>
15 - Overworld scroll arrows<br>
18 - Remove overworld scroll arrows<br>
1B - Remove various menus<br>
1E - Save? menu<br>
21 - Cinema 1, Line 8: (Blank)<br>
24 - Cinema 1, Line 7: travel to Donut Land.<br>
27 - Cinema 1, Line 6: Together, they now<br>
2A - Cinema 1, Line 5: still trapped in an egg.<br>
2D - Cinema 1, Line 4: Yoshi's friend who is<br>
30 - Cinema 1, Line 3: castle #1 and rescued<br>
33 - Cinema 1, Line 2: demented Iggy Koopa in<br>
36 - Cinema 1, Line 1: Mario has defeated the<br>
39 - Cinema 2, Line 8: Princess Toadstool?<br>
3C - Cinema 2, Line 7: What will become of<br>
3F - Cinema 2, Line 6: Mario in this new world?<br>
42 - Cinema 2, Line 5: Dome. What traps await<br>
45 - Cinema 2, Line 4: the underground Vanilla<br>
48 - Cinema 2, Line 3: memory. The next area is<br>
4B - Cinema 2, Line 2: castle #2 is now just a<br>
4E - Cinema 2, Line 1: Morton Koopa Jr. of<br>
51 - Cinema 3, Line 8: (Blank)<br>
54 - Cinema 3, Line 7: Green Switches yet?<br>
57 - Cinema 3, Line 6: you found the Red and<br>
5A - Cinema 3, Line 5: more difficult. Have<br>
5D - Cinema 3, Line 4: starting to get much<br>
60 - Cinema 3, Line 3: #3. Mario's quest is<br>
63 - Cinema 3, Line 2: Lemmy Koopa of castle<br>
66 - Cinema 3, Line 1: Mario has triumphed over<br>
69 - Cinema 4, Line 8: this perplexing forest.<br>
6C - Cinema 4, Line 7: to solve the puzzle of<br>
6F - Cinema 4, Line 6: Mario must use his brain<br>
72 - Cinema 4, Line 5: Illusion lies ahead.<br>
75 - Cinema 4, Line 4: are over. The Forest of<br>
78 - Cinema 4, Line 3: symphonies in castle #4<br>
7B - Cinema 4, Line 2: of composing Koopa<br>
7E - Cinema 4, Line 1: Ludwig von Koopa's days<br>
81 - Cinema 5, Line 8: (Blank)<br>
84 - Cinema 5, Line 7: tasty) Chocolate Island!<br>
87 - Cinema 5, Line 6: the dangerous (but<br>
8A - Cinema 5, Line 5: castle #5. Onward to<br>
8D - Cinema 5, Line 4: end to Roy Koopa of<br>
90 - Cinema 5, Line 3: Illusion and has put an<br>
93 - Cinema 5, Line 2: through the Forest of<br>
96 - Cinema 5, Line 1: Mario found his way<br>
99 - Cinema 6, Line 8: to the Valley of Bowser.<br>
9C - Cinema 6, Line 7: appears to be a gateway<br>
9F - Cinema 6, Line 6: is a sunken ship that<br>
A2 - Cinema 6, Line 5: now before him. There<br>
A5 - Cinema 6, Line 4: the challenge that is<br>
A8 - Cinema 6, Line 3: song. Mario must meet<br>
AB - Cinema 6, Line 2: #6 has sung her last<br>
AE - Cinema 6, Line 1: Wendy O. Koopa in castle<br>
B1 - Cinema 7, Line 8: Dinosaur Land?<br>
B4 - Cinema 7, Line 7: restore peace to<br>
B7 - Cinema 7, Line 6: Can Mario rescue her and<br>
BA - Cinema 7, Line 5: Toadstool is being held.<br>
BD - Cinema 7, Line 4: Castle where Princess<br>
C0 - Cinema 7, Line 3: that is left is Bowser's<br>
C3 - Cinema 7, Line 2: Koopa in castle #7. All<br>
C6 - Cinema 7, Line 1: Mario has defeated Larry<br>
C9 - Cinema BG: Underground<br>
CC - Cinema BG: Chocolate Island<br>
CF - Cinema FG: Castle<br>
D2 - Completely black<br>
D5 - THE END<br>
D8 - Lakitu et al. enemy names<br>
DB - Hammer Brother et al. enemy names<br>
DE - Sumo Brother et al. enemy names<br>
E1 - Banzai Bill et al. enemy names<br>
E4 - Dino-Rhino et al. enemy names<br>
E7 - 3Blargg et al. enemy names<br>
EA - Rip van Fish et al. enemy names<br>
ED - Big Boo et al. enemy names<br>
F0 - Dry Bones et al. enemy names<br>
F3 - Fishbone et al. enemy names<br>
F6 - Reznor enemy name<br>
F9 - Mechakoopas enemy name<br>
FC - Bowser/Koopa kids enemy names<br>
FF - Cinema BG: Overworld</td></tr>
<tr><td class="normal border nowrap">$7E:0013</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Frame Counter (Increases by 1 each frame)</td></tr>
<tr><td class="normal border nowrap">$7E:0014</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">"Sprite" frame counter. Stops when sprites are frozen, etc. Basically, a frame counter that only runs when a sprite is running.</td></tr>
<tr><td class="normal border nowrap">$7E:0015</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">Controller data 1<br>
01=Right, 02=Left, 04=Down, 08=Up, 10=Start, 20=Select, 40=Y and X, 80=B and A</td></tr>
<tr><td class="normal border nowrap">$7E:0016</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">Controller data 1 (one frame) - Same values as $15</td></tr>
<tr><td class="normal border nowrap">$7E:0017</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">Controller data 2 - 10=R, 20=L, 40=X, 80=A</td></tr>
<tr><td class="normal border nowrap">$7E:0018</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">Controller data 2 (one frame) - Same values as $17</td></tr>
<tr><td class="normal border nowrap">$7E:0019</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Powerup. #$00 = Small, #$01 = Big, #$02 = Cape, #$03 = Fire.</td></tr>
<tr><td class="normal border nowrap">$7E:001A</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Layer 1 X position. Mirror of $210D.</td></tr>
<tr><td class="normal border nowrap">$7E:001C</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Layer 1 Y position. Mirror of $210E.</td></tr>
<tr><td class="normal border nowrap">$7E:001E</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Layer 2 X position. Mirror of $210F.</td></tr>
<tr><td class="normal border nowrap">$7E:0020</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Layer 2 Y position. Mirror of $2110.</td></tr>
<tr><td class="normal border nowrap">$7E:0022</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Layer 3 X postion. Mirror of $2111.</td></tr>
<tr><td class="normal border nowrap">$7E:0024</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Layer 3 Y position. Mirror of $2112.</td></tr>
<tr><td class="normal border nowrap">$7E:0026</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Depending on Layer 3 tides being activated or not, it's either:<br>
<br>
Not activated:<br>
(Layer 2 Xpos) minus (Layer 1 Xpos)<br>
Activated:<br>
Layer 3 Xpos) minus (Layer 1 Xpos)</td></tr>
<tr><td class="normal border nowrap">$7E:0028</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Depending on layer 3 tides being activated or not, it's either:<br>
Not activated:<br>
(Layer 2 Ypos) minus (Layer 1 Ypos)<br>
Activated:<br>
Layer 3 Ypos) minus (Layer 1 Ypos)</td></tr>
<tr><td class="normal border nowrap">$7E:002A</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Mode 7 Center X Position. Mirror of $211F, + #$0080.</td></tr>
<tr><td class="normal border nowrap">$7E:002C</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Mode 7 Center Y position. Mirror of $2120, + #$0080.</td></tr>
<tr><td class="normal border nowrap">$7E:002E</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Mode 7 Parameter A (Scale X). Mirror of $211B.</td></tr>
<tr><td class="normal border nowrap">$7E:0030</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Mode 7 Parameter B (Shear X). Mirror of $211C.</td></tr>
<tr><td class="normal border nowrap">$7E:0032</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Mode 7 Parameter C (Shear Y). Mirror of $211D.</td></tr>
<tr><td class="normal border nowrap">$7E:0034</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Mode 7 Parameter D (Scale Y). Mirror of $211E.</td></tr>
<tr><td class="normal border nowrap">$7E:0036</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Mode 7 Rotation. It will rotate layer 1/BG1 clockwise as you increase it.</td></tr>
<tr><td class="normal border nowrap">$7E:0038</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Mode 7 scaling. Byte 1 scales it horizontally, while byte 2 scales it vertically.</td></tr>
<tr><td class="normal border nowrap">$7E:003A</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Mode 7 Layer 1 X Position. Mirror of $210D.</td></tr>
<tr><td class="normal border nowrap">$7E:003C</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Mode 7 Layer 1 Y Position. Mirror of $210E.</td></tr>
<tr><td class="normal border nowrap">$7E:003E</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">BG Mode select ($2105) applied with IRQ below status bar. Setting bit 3 (%00001000) gives Layer 3 priority.</td></tr>
<tr><td class="normal border nowrap">$7E:003F</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">OAM Address, low byte. Also known as the mirror of register $2102. High byte is at ROM $00:846B.</td></tr>
<tr><td class="normal border nowrap">$7E:0040</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">CGADSUB setting: abcdefgh a = 0 for Addition, 1 for Subtraction, b = 1/2 Enable c = Back Enable, d = Object Enable, efgh = Enable BG 4, 3, 2, 1 (bit 3 only affect below the status bar). Mirror of $2131.</td></tr>
<tr><td class="normal border nowrap">$7E:0041</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">BG 1 and 2 Window Mask Settings: aaaabbbb a = BG 2 Window Settings b = BG 1 Window Settings. Mirror of $2123.</td></tr>
<tr><td class="normal border nowrap">$7E:0042</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">BG 3 and 4 Window Mask Settings: aaabbbb a = BG 4 Window Settings b = BG 3 Window Settings. Mirror of $2124.</td></tr>
<tr><td class="normal border nowrap">$7E:0043</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">OBJ and Color Window Settings: aaaabbbb a = Color Window Settings b = OBJ Window Settings. Mirror of $2125.</td></tr>
<tr><td class="normal border nowrap">$7E:0044</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Initial Settings for Color Addition: aabb00cd a = Main Color Window On/Off, b = Sub Color Window On/Off, c = Fixed Color Add/Subtract Enable, d = Direct Select. Mirror of $2130.</td></tr>
<tr><td class="normal border nowrap">$7E:0045</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Camera</td><td class="normal border">Column (or row) of map16 tiles to use for VRAM upload when L1 is scrolling left (or up)</td></tr>
<tr><td class="normal border nowrap">$7E:0047</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Camera</td><td class="normal border">Identical to $7E0045, but used for right (or down) direction scrolling</td></tr>
<tr><td class="normal border nowrap">$7E:0049</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Camera</td><td class="normal border">Identical to $7E0045-$7E0046, but for layer 2 levels where applicable.</td></tr>
<tr><td class="normal border nowrap">$7E:004B</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Camera</td><td class="normal border">Identical to $7E0047-$7E0048, but for layer 2 levels where applicable.</td></tr>
<tr><td class="normal border nowrap">$7E:004D</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Camera</td><td class="normal border">Last X (or Y) L1 scroll value where VRAM upload of map16 tiles was performed when scrolling left (or up).  The low 4 bits are forced to zero in order to get scroll values on a 16 pixel boundary.  It is used to determine if a VRAM update is necessary during scrolling.</td></tr>
<tr><td class="normal border nowrap">$7E:004F</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Camera</td><td class="normal border">Identical to $7E004D-$7E004E, but for scroll in the right (or down) direction.</td></tr>
<tr><td class="normal border nowrap">$7E:0051</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Camera</td><td class="normal border">Identical to $7E004D-$7E004E, but for L2 where applicable.</td></tr>
<tr><td class="normal border nowrap">$7E:0053</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Camera</td><td class="normal border">Identical to $7E004F-$7E0050, but for L2 where applicable.</td></tr>
<tr><td class="normal border nowrap">$7E:0055</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Camera</td><td class="normal border">Direction of scroll for L1.<br>
<br>
00: left (or up)<br>
02: right (or down)<br>
<br>
Used to index the above 2 byte camera tables.</td></tr>
<tr><td class="normal border nowrap">$7E:0056</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Camera</td><td class="normal border">Identical to $7E0055, but for L2 where applicable.</td></tr>
<tr><td class="normal border nowrap">$7E:0057</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Blocks</td><td class="normal border">Used in the level loading code. It's the position within the subscreen. Could be used as scratch RAM (except in ObjecTool and similar codes).</td></tr>
<tr><td class="normal border nowrap">$7E:0058</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Cleared during reset, titlescreen load and OW load.</td></tr>
<tr><td class="normal border nowrap">$7E:0059</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Blocks</td><td class="normal border">Used in the level loading routine. It's the size of the object, or extended object type depending on what object is being loaded. Could be used as scratch RAM (except in ObjecTool and similar codes).</td></tr>
<tr><td class="normal border nowrap">$7E:005A</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Blocks</td><td class="normal border">Used in the level loading routine. It's the object number. Could be used as scratch RAM (except in ObjecTool and similar codes).</td></tr>
<tr><td class="normal border nowrap">$7E:005B</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Screen mode: Cc????Vv<br>
C=Collision with layer 2<br>
c=Collision with layer 1?<br>
V=Vertical layer 2 <br>
v=Vertical layer 1</td></tr>
<tr><td class="normal border nowrap">$7E:005C</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset, titlescreen and overworld load.</td></tr>
<tr><td class="normal border nowrap">$7E:005D</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border"># of screens in level</td></tr>
<tr><td class="normal border nowrap">$7E:005E</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Camera</td><td class="normal border">The last screen # (minus 1) before the camera stops moving horizontally. (Only applies in horizontal levels.)</td></tr>
<tr><td class="normal border nowrap">$7E:005F</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Camera</td><td class="normal border">The last screen # (minus 1) before the camera stops moving vertically. (Only applies in vertical levels.)</td></tr>
<tr><td class="normal border nowrap">$7E:0060</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset, titlescreen and overworld load.</td></tr>
<tr><td class="normal border nowrap">$7E:0064</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Properties (YXPPCCCT) byte for most sprites.</td></tr>
<tr><td class="normal border nowrap">$7E:0065</td><td class="normal border nowrap">3 bytes</td><td class="normal border nowrap">Pointer</td><td class="normal border">24bit pointer to Level Data.</td></tr>
<tr><td class="normal border nowrap">$7E:0068</td><td class="normal border nowrap">3 bytes</td><td class="normal border nowrap">Pointer</td><td class="normal border">24bit pointer to the layer 2 data.</td></tr>
<tr><td class="normal border nowrap">$7E:006B</td><td class="normal border nowrap">3 bytes</td><td class="normal border nowrap">Pointer</td><td class="normal border">Pointer to low byte of block data (used during level load).</td></tr>
<tr><td class="normal border nowrap">$7E:006E</td><td class="normal border nowrap">3 bytes</td><td class="normal border nowrap">Pointer</td><td class="normal border">Pointer to high byte of block data (used during level load).</td></tr>
<tr><td class="normal border nowrap">$7E:0071</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario Action trigger<br>
<br>
00=nothing<br>
01=flashing as if Mario's hurt by an enemy<br>
02=get mushroom animation<br>
03=get cape animation (note: you must write to $1496 for it to work)<br>
04=get flower animation (note: you must write to $149B for it to work)<br>
05=enter a horizontal pipe<br>
06=enter a vertical pipe<br>
07=shoot from a diagonal pipe<br>
08=shoot into the sky (like when yoshi gets wings from a ?-block)<br>
09=end the level without activating events on the OW (used when Mario dies) (note: you will lose a life)<br>
0A=used in castle entrance moves<br>
0B=Mario stops until $00 is written<br>
0C=castle destruction moves<br>
0D=enter a door</td></tr>
<tr><td class="normal border nowrap">$7E:0072</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario's image while in the air.</td></tr>
<tr><td class="normal border nowrap">$7E:0073</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Mario is ducking flag. #$04 is yes, #$00 is no. Other values are yes in most cases, but some patches might glitch, so it's best to use #$04.</td></tr>
<tr><td class="normal border nowrap">$7E:0074</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Mario is climbing flag</td></tr>
<tr><td class="normal border nowrap">$7E:0075</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">"Mario is in water" flag</td></tr>
<tr><td class="normal border nowrap">$7E:0076</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario's direction. <br>
00=Left; 01=Right</td></tr>
<tr><td class="normal border nowrap">$7E:0077</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Player blocked status - Used to check if player is blocked in a certain direction. Format: SxxMUDLR<br>
The M bit means that Mario is in the middle of a block.<br>
The S bit indicates that Mario is touching the side of the screens while horizontal screen scrolling is disabled.</td></tr>
<tr><td class="normal border nowrap">$7E:0078</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Used to obscure (parts of) Mario.</td></tr>
<tr><td class="normal border nowrap">$7E:0079</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:007A</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Accumulating fraction bits for the player's X speed.</td></tr>
<tr><td class="normal border nowrap">$7E:007B</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario Xspeed. #$7F is the fastest rightwards speed, while #$80 is the highest leftwards. +/-#$15 is fully walking, +/-#$30 is fully running. #$00-#$7F is right, #$80-#$FF is left.</td></tr>
<tr><td class="normal border nowrap">$7E:007C</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset, titlescreen, overworld and level load.</td></tr>
<tr><td class="normal border nowrap">$7E:007D</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario Yspeed. #$80 is the highest upwards speed, while #$7F is the highest downwards speed. #$15 is falling at mid-speed, #$30 is falling at max-speed, #$EB is jumping at mid-speed and #$D0 is jumping at full speed. #$00-#$7F = falling, #$80-#$FF = rising.</td></tr>
<tr><td class="normal border nowrap">$7E:007E</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">Mario's X position (screen)</td></tr>
<tr><td class="normal border nowrap">$7E:0080</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">Mario's Y position (screen)</td></tr>
<tr><td class="normal border nowrap">$7E:0085</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Water Level flag</td></tr>
<tr><td class="normal border nowrap">$7E:0086</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Slippery Level flag. #$FF makes the player slip a LOT while #$01 makes the player slip barely. #$00 disables the slippery level flag.</td></tr>
<tr><td class="normal border nowrap">$7E:0087</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset, titlescreen, overworld and level load.</td></tr>
<tr><td class="normal border nowrap">$7E:0088</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">How long Mario goes into a pipe until he warps to another level.</td></tr>
<tr><td class="normal border nowrap">$7E:0089</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Actions to take when Mario enters/exits a pipe. (Writing to it will only have effect if 7E:0071 is equal to 06.)<br>
<br>
00=Enter a right-facing horizontal pipe.<br>
01=Enter a left-facing horizontal pipe.<br>
02=Enter a down-facing vertical pipe.<br>
03=Enter an up-facing vertical pipe.<br>
04=Exit from a left-facing horizontal pipe.<br>
05=Exit from a right-facing horizontal pipe.<br>
06=Exit from an up-facing vertical pipe.<br>
07=Exit from a down-facing vertical pipe.</td></tr>
<tr><td class="normal border nowrap">$7E:008A</td><td class="normal border nowrap">3 bytes</td><td class="normal border nowrap">Pointer</td><td class="normal border">Holds the 3-byte pointer to the location of the decompressed GFX files inside the ROM. Solely $8A is used as number of options to select in a blinking cursor menu. <br>
Solely $8A also controls the speed of revealing event tiles (Only 01 and 08 are valid though)</td></tr>
<tr><td class="normal border nowrap">$7E:008D</td><td class="normal border nowrap">3 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">24-bit pointer to part of the decompressed graphics; starts at $7EACFE/F and decrementing. RAM address has multiple purposes, however.</td></tr>
<tr><td class="normal border nowrap">$7E:0092</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">$94 & #$0F + #$08. That means it's the player's position within a single Map16 tile.</td></tr>
<tr><td class="normal border nowrap">$7E:0093</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">$92 &gt;&gt; 3. That means this is set to 0 if the player's position is on the left side of a block, and 1 if on the right side.</td></tr>
<tr><td class="normal border nowrap">$7E:0094</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">Mario's X position (level, next frame)</td></tr>
<tr><td class="normal border nowrap">$7E:0096</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">Mario's Y position (level, next frame)</td></tr>
<tr><td class="normal border nowrap">$7E:0098</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite creation: Y position (low)<br>
Custom Block: Y position of contact(low)</td></tr>
<tr><td class="normal border nowrap">$7E:0099</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite creation: Y position (high)<br>
Custom Block: Y position of contact(high)</td></tr>
<tr><td class="normal border nowrap">$7E:009A</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite creation: X position (low)<br>
Custom Block: X position of contact(low)</td></tr>
<tr><td class="normal border nowrap">$7E:009B</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite creation: X position (high)<br>
Custom Block: X position of contact(high)</td></tr>
<tr><td class="normal border nowrap">$7E:009C</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Blocks</td><td class="normal border">Generated Map16 tile (used with $00BEB0).<br>
Valid values:<br>
00 - do nothing<br>
01 - empty (025), sets item memory setting bit<br>
02 - empty (025)<br>
03 - vine (006)<br>
04 - solid bush tile, used by berries (049)<br>
05 - always turning turn block (048)<br>
06 - coin (02B)<br>
07 - tree background, used by the mushroom scales (sprite 8F) (0A2)<br>
08 - mole hole (0C6)<br>
09 - invisible solid block (152)<br>
0A - multiple coin turnblock (11B)<br>
0B - multiple coin q block (123)<br>
0C - turn block (11E)<br>
0D - used block (132)<br>
0E - note block (113)<br>
0F - note block (115)<br>
10 - 4-way note block (116)<br>
11 - turn block you can bounce off from the side (12B)<br>
12 - translucent block (12C)<br>
13 - on/off switch (112)<br>
14 - side of pipe, left (168)<br>
15 - side of pipe, right (169)<br>
16 - used block (132), sets item memory setting bit<br>
17 - O block from 1up game (15E), sets item memory setting bit<br>
18 - unknown, sets item memory setting bit<br>
19 - unknown<br>
1A - unknown<br>
1B - unknown (invisible?)<br>
anything else - crash or undefined behaviour</td></tr>
<tr><td class="normal border nowrap">$7E:009D</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Lock sprites timer</td></tr>
<tr><td class="normal border nowrap">$7E:009E</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite number</td></tr>
<tr><td class="normal border nowrap">$7E:00AA</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite Y Speed Table</td></tr>
<tr><td class="normal border nowrap">$7E:00B6</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite X Speed Table</td></tr>
<tr><td class="normal border nowrap">$7E:00C2</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite table that is not restricted to one predefined purpose. In SMW, it's most commonly used as a pointer to different parts of a sprite.</td></tr>
<tr><td class="normal border nowrap">$7E:00CE</td><td class="normal border nowrap">3 bytes</td><td class="normal border nowrap">Pointer</td><td class="normal border">24bit pointer to level's sprite data.</td></tr>
<tr><td class="normal border nowrap">$7E:00D1</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">Mario's X position (level, current frame)</td></tr>
<tr><td class="normal border nowrap">$7E:00D3</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">Mario's Y position (level, current frame)</td></tr>
<tr><td class="normal border nowrap">$7E:00D5</td><td class="normal border nowrap">3 bytes</td><td class="normal border nowrap">Pointer</td><td class="normal border">Pointer to X and Y positions of Wiggler segments.</td></tr>
<tr><td class="normal border nowrap">$7E:00D8</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite Ypos Low Byte (table)</td></tr>
<tr><td class="normal border nowrap">$7E:00E4</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite Xpos Low Byte (table)</td></tr>
<tr><td class="normal border nowrap">$7E:00F0</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty space. Note: Is used by Lunar Magic.</td></tr>
<tr><td class="normal border nowrap">$7E:0100</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Game Mode.<br>
00 Load Nintendo Presents<br>
01 Nintendo Presents<br>
02 Fade to Title Screen<br>
03 Load Title Screen<br>
04 Prepare Title Screen<br>
05 Title Screen: Fade in<br>
06 Title Screen: Circle effect<br>
07 Title Screen<br>
08 Title Screen: File select<br>
09 Title Screen: File delete<br>
0A Title Screen: Player select<br>
0B Fade to Overworld<br>
0C Load Overworld<br>
0D Overworld: Fade in<br>
0E Overworld<br>
0F Fade to Level<br>
10 Fade to Level (black)<br>
11 Load Level (Mario Start!)<br>
12 Prepare Level<br>
13 Level: Fade in<br>
14 Level<br>
15 Fade to Game Over<br>
16 Fade to Game Over?<br>
17 Game Over<br>
18 Load Credits/Cutscene?<br>
19 Load Credits/Cutscene?<br>
1A Load Credits/Cutscene?<br>
1B Ending: Credits / Cutscene<br>
1C Fade to Yoshi's House<br>
1D Fade to Yoshi's House (black)<br>
1E Ending: Yoshi's House: Fade in <br>
1F Ending: Yoshi's House<br>
20 Fade to Enemies<br>
21 Fade to Enemies (black)<br>
22 Fade to Enemies?<br>
23 Fade to Enemies (black)?<br>
24 Ending: Enemies: Fade in<br>
25 Ending: Enemies<br>
26 Fade to The End / Go to 22<br>
27 Fade to The End (black)<br>
28 Ending: The End: Fade in<br>
29 Ending: The End</td></tr>
<tr><td class="normal border nowrap">$7E:0101</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Currently loaded sprite GFX files (stored in reverse order)</td></tr>
<tr><td class="normal border nowrap">$7E:0105</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Currently loaded layer GFX files (stored in reverse order)</td></tr>
<tr><td class="normal border nowrap">$7E:0109</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">When set to a non-zero value, the OW loading routine is overridden by loading level value stored here-$24. This means levels 0-FF can be used with the exception of level DC.</td></tr>
<tr><td class="normal border nowrap">$7E:010A</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Save File #</td></tr>
<tr><td class="normal border nowrap">$7E:010B</td><td class="normal border nowrap">245 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Stack</td></tr>
<tr><td class="normal border nowrap">$7E:0200</td><td class="normal border nowrap">544 bytes</td><td class="normal border nowrap">I/O</td><td class="normal border">OAM. $0310-$0313 is for Mario's upper tile, $0314-$0317 for Mario's lower tile.</td></tr>
<tr><td class="normal border nowrap">$7E:0420</td><td class="normal border nowrap">128 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Table that determines the size of a sprite's tile - 8x8 (#$00) or 16x16 (#$02). Each byte corresponds to 4 OAM bytes. Stores to $0400-$041F (where each 2 bits correspond to 4 OAM bytes.)<br>
The lowest bit (#$01) is also used for the high bit of the X position.<br>
<br>
$0466: During the P-Baloon flight, equals 2 if mario should show his inflated frame. Otherwise, equals zero.</td></tr>
<tr><td class="normal border nowrap">$7E:04A0</td><td class="normal border nowrap">448 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">HDMA table for windowing effects (keyhole, level end, etc.)</td></tr>
<tr><td class="normal border nowrap">$7E:0660</td><td class="normal border nowrap">32 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.<br>
Used by the newer LM versions (purpose yet unknown). Usage in ASM hacks not very recommended.</td></tr>
<tr><td class="normal border nowrap">$7E:0680</td><td class="normal border nowrap">21 bytes</td><td class="normal border nowrap">Palettes</td><td class="normal border">Used for the lightning effect, Big Boo Boss fading, and Magikoopa's fading.</td></tr>
<tr><td class="normal border nowrap">$7E:0695</td><td class="normal border nowrap">108 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.<br>
100 bytes used in LM 1.70+ for VRAM modification</td></tr>
<tr><td class="normal border nowrap">$7E:0701</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Palettes</td><td class="normal border">BG Colour.  Used during gameplay in conjunction with $2132.</td></tr>
<tr><td class="normal border nowrap">$7E:0703</td><td class="normal border nowrap">512 bytes</td><td class="normal border nowrap">Palettes</td><td class="normal border">The whole palette. Seems to only be used in the level loading routine.</td></tr>
<tr><td class="normal border nowrap">$7E:0903</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Palettes</td><td class="normal border">Copy of BG colour $0701/2.</td></tr>
<tr><td class="normal border nowrap">$7E:0905</td><td class="normal border nowrap">496 bytes</td><td class="normal border nowrap">Palettes</td><td class="normal border">Copy of palettes 0-F from $0703-$08F2. Only the first half of palette F is included.</td></tr>
<tr><td class="normal border nowrap">$7E:0AF5</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Cleared during reset and titlescreen load. Also cleared after a boss had been beaten.</td></tr>
<tr><td class="normal border nowrap">$7E:0AF6</td><td class="normal border nowrap">256 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Used for three different things:<br>
1. Decompressed overworld graphics, animated tiles. For that it also cooperates with $0BF6-$0C55.<br>
2. Iggy's platform interaction. (16x16.)<br>
3. Various tables for the Yoshi eggs at the credits. That includes how much time to wait until a new egg breaks ($0B08), Y speed ($0B0C,x), etc.</td></tr>
<tr><td class="normal border nowrap">$7E:0BF6</td><td class="normal border nowrap">384 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Decompressed GFX for tiles 4A-4F, 5A-5F of SP1.</td></tr>
<tr><td class="normal border nowrap">$7E:0D76</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Graphics</td><td class="normal border">Used during the Mario GFX DMA routine.  It holds the first of three possible source addresses.</td></tr>
<tr><td class="normal border nowrap">$7E:0D78</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Graphics</td><td class="normal border">Used during the Mario GFX DMA routine.  It holds the second of three possible source addresses.</td></tr>
<tr><td class="normal border nowrap">$7E:0D7A</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Graphics</td><td class="normal border">Used during the Mario GFX DMA routine.  It holds the third of three possible source addresses.</td></tr>
<tr><td class="normal border nowrap">$7E:0D7C</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Graphics</td><td class="normal border">Used during the Mario GFX DMA routine.  It holds the first of three possible VRAM addresses.</td></tr>
<tr><td class="normal border nowrap">$7E:0D7E</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Graphics</td><td class="normal border">Used during the Mario GFX DMA routine.  It holds the second of three possible VRAM addresses.</td></tr>
<tr><td class="normal border nowrap">$7E:0D80</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Graphics</td><td class="normal border">Used during the Mario GFX DMA routine.  It holds the third of three possible VRAM addresses.</td></tr>
<tr><td class="normal border nowrap">$7E:0D82</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Pointer</td><td class="normal border">Pointer to Mario/Luigi palette. B2C8=Mario B2DC=Luigi, B2F0=Fire Mario, B304=Fire Luigi</td></tr>
<tr><td class="normal border nowrap">$7E:0D84</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Used in Mario's DMA routine. Basically holds the amount of tiles to load. Is 0A in levels and 06 on the overworld.</td></tr>
<tr><td class="normal border nowrap">$7E:0D85</td><td class="normal border nowrap">20 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">2 byte pointers in bank 7E for uploading Player's onscreen tiles.  2 sets of 10 bytes (top half, bottom half) for Mario's head, body, cape, Yoshi head / Fireball, Yoshi body / Fireball.  </td></tr>
<tr><td class="normal border nowrap">$7E:0D99</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Graphics</td><td class="normal border">Holds the lower two bytes of the RAM address where the player's graphics are stored; used during the player graphics DMA routine.</td></tr>
<tr><td class="normal border nowrap">$7E:0D9B</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Activates different level modes, depending on the following values:<br>
$00 = Regular level<br>
$01 = Mario Start, Time Up, etc. + Title Screen + Castle destruction scene<br>
$02 = Overworld<br>
$80 = Iggy's and Larry's battle mode<br>
$C0 = Morton's and Roy's battle mode<br>
$C1 = Bowser</td></tr>
<tr><td class="normal border nowrap">$7E:0D9C</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:0D9D</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Main Screen Setting of Current Level Mode (000abcde a = Object b = BG 4 c = BG 3 d = BG 2 e = BG 1). Appear as TM in LM. Mirror of $212C, transfer only occurs on level load.</td></tr>
<tr><td class="normal border nowrap">$7E:0D9E</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Sub Screen Setting of Current Level Mode (000abcde a = Object b = BG 4 c = BG 3 d = BG 2 e = BG 1). Appear as TD in LM. Mirror of $212D, transfer only occurs on level load.</td></tr>
<tr><td class="normal border nowrap">$7E:0D9F</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">H-DMA Channel Enable: abcdefgh a = Channel 7 .. h = Channel 0: 1 = Enable 0 = Disable. Mirror of $420C.</td></tr>
<tr><td class="normal border nowrap">$7E:0DA0</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Current Player (0 - Player 1, 1 - Player 2).  Used by controller Routine.</td></tr>
<tr><td class="normal border nowrap">$7E:0DA1</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:0DA2</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">Copy of controller data 1.</td></tr>
<tr><td class="normal border nowrap">$7E:0DA3</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">2nd Player Controller data 1 - All the same values as $7E0015</td></tr>
<tr><td class="normal border nowrap">$7E:0DA4</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">Copy of controller data 2.</td></tr>
<tr><td class="normal border nowrap">$7E:0DA5</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">2nd Player Controller data 2 - All the same values as $7E0017</td></tr>
<tr><td class="normal border nowrap">$7E:0DA6</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">Copy of controller data 1 - One Frame.</td></tr>
<tr><td class="normal border nowrap">$7E:0DA7</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">2nd Player Controller data 1 - All the same values as $7E0015 - One frame</td></tr>
<tr><td class="normal border nowrap">$7E:0DA8</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">Copy of controller data 2 - One Frame.</td></tr>
<tr><td class="normal border nowrap">$7E:0DA9</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">2nd Player Controller data 2 - All the same values as $7E0017 - One frame</td></tr>
<tr><td class="normal border nowrap">$7E:0DAA</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">Player 1 controller disable flags ($4219), 1 frame (to be stored in $16). Format: byetUDLR. b = B, y = Y, e = Select, t = Start, UDLR = Up/Down/Left/Right.</td></tr>
<tr><td class="normal border nowrap">$7E:0DAB</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">Player 2 controller disable flags ($4219), 1 frame (to be stored in $16). Format: byetUDLR. b = B, y = Y, e = Select, t = Start, UDLR = Up/Down/Left/Right.</td></tr>
<tr><td class="normal border nowrap">$7E:0DAC</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">Player 1 controller disable flags ($4218), 1 frame (to be stored in $18). Format: axlr0000. a = A, x = X, l = L, r = R, 0 = null/unused.</td></tr>
<tr><td class="normal border nowrap">$7E:0DAD</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">Player 2 controller disable flags ($4218), 1 frame (to be stored in $18). Format: axlr0000. a = A, x = X, l = L, r = R, 0 = null/unused.</td></tr>
<tr><td class="normal border nowrap">$7E:0DAE</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Brightness (0-F). Mirror of $2100.</td></tr>
<tr><td class="normal border nowrap">$7E:0DAF</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Mosaic direction. 00 when shrinking size. 01 when increasing size. </td></tr>
<tr><td class="normal border nowrap">$7E:0DB0</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Hardware mirror</td><td class="normal border">Current mosaic pixel size on level load. Mirror of $2106, bits 0 and 1 always set.</td></tr>
<tr><td class="normal border nowrap">$7E:0DB1</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Is used to keep a mode active.<br>
If value is positive, game mode doesn't change.</td></tr>
<tr><td class="normal border nowrap">$7E:0DB2</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">2-Player Flag</td></tr>
<tr><td class="normal border nowrap">$7E:0DB3</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Character. 00=Mario; 01=Luigi</td></tr>
<tr><td class="normal border nowrap">$7E:0DB4</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario's Lives</td></tr>
<tr><td class="normal border nowrap">$7E:0DB5</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Luigi Lives</td></tr>
<tr><td class="normal border nowrap">$7E:0DB6</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario Coins</td></tr>
<tr><td class="normal border nowrap">$7E:0DB7</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Luigi Coins</td></tr>
<tr><td class="normal border nowrap">$7E:0DB8</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario Powerup</td></tr>
<tr><td class="normal border nowrap">$7E:0DB9</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Luigi Powerup</td></tr>
<tr><td class="normal border nowrap">$7E:0DBA</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Mario Yoshi Colour</td></tr>
<tr><td class="normal border nowrap">$7E:0DBB</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Luigi Yoshi Colour</td></tr>
<tr><td class="normal border nowrap">$7E:0DBC</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario Item Box. 00=Nothing; 01=Mushroom; 02=Cape; 03=Fire Flower</td></tr>
<tr><td class="normal border nowrap">$7E:0DBD</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Luigi Item Box. 00=Nothing; 01=Mushroom; 02=Cape; 03=Fire Flower</td></tr>
<tr><td class="normal border nowrap">$7E:0DBE</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Current player's lives</td></tr>
<tr><td class="normal border nowrap">$7E:0DBF</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Current player's coins</td></tr>
<tr><td class="normal border nowrap">$7E:0DC0</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Green Star Block Count Counter (starts at 30, decrements for each coin)</td></tr>
<tr><td class="normal border nowrap">$7E:0DC1</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Player can carry Yoshi over levels flag.</td></tr>
<tr><td class="normal border nowrap">$7E:0DC2</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Item in the reserved item aka Item Box. #$00=None; #$01=Mushroom; #$02=Fire Flower; #$03=Star; #$04=Cape</td></tr>
<tr><td class="normal border nowrap">$7E:0DC4</td><td class="normal border nowrap">3 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:0DC7</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">OW X position of Mario (Same as $7E:1F17(?))</td></tr>
<tr><td class="normal border nowrap">$7E:0DC9</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">OW Y position of Mario (Same as $7E:1F19 (?))</td></tr>
<tr><td class="normal border nowrap">$7E:0DCB</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">OW X position of Luigi (Same as $7E:1F1B (?))</td></tr>
<tr><td class="normal border nowrap">$7E:0DCD</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">OW Y position of Luigi (Same as $7E:1F1D (?))</td></tr>
<tr><td class="normal border nowrap">$7E:0DD3</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Overworld</td><td class="normal border">Player direction. 0 = up, 2 = down, 4 = left, 6 = right.</td></tr>
<tr><td class="normal border nowrap">$7E:0DD5</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">FF = activate secret event on level exit<br>
Set #$00 on level end to deactivate auto-walk.</td></tr>
<tr><td class="normal border nowrap">$7E:0DD6</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Current player. Used on the overworld. Is actually $0DB3 * 4.</td></tr>
<tr><td class="normal border nowrap">$7E:0DD7</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:0DD9</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:0DDA</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Copy of $1DFB, the music register, but is forced to be normal music (nothing above 80.)</td></tr>
<tr><td class="normal border nowrap">$7E:0DDB</td><td class="normal border nowrap">3 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:0DDE</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Which file to erase on the erase file screen. Format: xxxxx123. It is also used as an overworld sprite index.</td></tr>
<tr><td class="normal border nowrap">$7E:0DDF</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Starting OAM index for overworld sprites.</td></tr>
<tr><td class="normal border nowrap">$7E:0DE0</td><td class="normal border nowrap">5 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Seems to be some kind of alternate index for overworld sprites.  If the normal sprite index ($0DDE) is less than 5, it is used to index $0DE0, and the result is transferred to X and used as the sprite index instead.  The code that handles this is around $04F80D.</td></tr>
<tr><td class="normal border nowrap">$7E:0DE5</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">OW Sprite Type (table)</td></tr>
<tr><td class="normal border nowrap">$7E:0DF5</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Misc. overworld sprite table.</td></tr>
<tr><td class="normal border nowrap">$7E:0E05</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Misc. overworld sprite table.</td></tr>
<tr><td class="normal border nowrap">$7E:0E15</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Misc. overworld sprite table.</td></tr>
<tr><td class="normal border nowrap">$7E:0E25</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Misc. overworld sprite table.</td></tr>
<tr><td class="normal border nowrap">$7E:0E35</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">OW Sprite XPos Low</td></tr>
<tr><td class="normal border nowrap">$7E:0E45</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">OW Sprite YPos Low</td></tr>
<tr><td class="normal border nowrap">$7E:0E55</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">OW Sprite ZPos Low (i.e. distance the sprite is from the ground).  May have multiple purposes, however.</td></tr>
<tr><td class="normal border nowrap">$7E:0E65</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">OW Sprite XPos High</td></tr>
<tr><td class="normal border nowrap">$7E:0E75</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">OW Sprite YPos High</td></tr>
<tr><td class="normal border nowrap">$7E:0E85</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">OW Sprite ZPos High (i.e. distance the sprite is from the ground).  Probably has no real purpose in the original SMW; it may not be anything but 00.</td></tr>
<tr><td class="normal border nowrap">$7E:0E95</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">OW Sprite X speed</td></tr>
<tr><td class="normal border nowrap">$7E:0EA5</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">OW Sprite Y speed</td></tr>
<tr><td class="normal border nowrap">$7E:0EB5</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">OW Sprite Z speed</td></tr>
<tr><td class="normal border nowrap">$7E:0EC5</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Accumulating fraction bits for overworld sprite X speed.</td></tr>
<tr><td class="normal border nowrap">$7E:0ED5</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Accumulating fraction bits for overworld sprite Y speed.</td></tr>
<tr><td class="normal border nowrap">$7E:0EE5</td><td class="normal border nowrap">16 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Accumulating fraction bits for overworld sprite Z speed.</td></tr>
<tr><td class="normal border nowrap">$7E:0EF7</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">If negative and Mario is on a level tile, Mario will enter it directly.</td></tr>
<tr><td class="normal border nowrap">$7E:0EF8</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Yoshi has been saved for the first time flag (used for Yoshi's thank message)</td></tr>
<tr><td class="normal border nowrap">$7E:0EF9</td><td class="normal border nowrap">55 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Status Bar Tilemap</td></tr>
<tr><td class="normal border nowrap">$7E:0F30</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Timer Frame Counter. After this reaches $00, the game decrements the timer.</td></tr>
<tr><td class="normal border nowrap">$7E:0F31</td><td class="normal border nowrap">3 bytes</td><td class="normal border nowrap">Counter</td><td class="normal border">Timer<br>
$0F31 = Hundreds<br>
$0F32 = Tens<br>
$0F33 = Ones</td></tr>
<tr><td class="normal border nowrap">$7E:0F34</td><td class="normal border nowrap">3 bytes</td><td class="normal border nowrap">Counter</td><td class="normal border">Mario Score</td></tr>
<tr><td class="normal border nowrap">$7E:0F37</td><td class="normal border nowrap">3 bytes</td><td class="normal border nowrap">Counter</td><td class="normal border">Luigi Score</td></tr>
<tr><td class="normal border nowrap">$7E:0F3A</td><td class="normal border nowrap">6 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared on reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:0F40</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Counter</td><td class="normal border">Amount of score to add up to the score total, at level end. (Decrements as total score increments.)</td></tr>
<tr><td class="normal border nowrap">$7E:0F42</td><td class="normal border nowrap">6 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared on reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:0F48</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Mario Bonus stars</td></tr>
<tr><td class="normal border nowrap">$7E:0F49</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Luigi Bonus Stars</td></tr>
<tr><td class="normal border nowrap">$7E:0F4A</td><td class="normal border nowrap">20 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Castle background flame's frame to display. Is also used for Boo ring to determine its speed, 00 = still, 01-7F = counter-clockwise, 80-FF = clockwise.<br>
Is also used for several other sprites that are generated by one single sprites, such as the ghost ceiling, not necessarily for the same purpose.</td></tr>
<tr><td class="normal border nowrap">$7E:0F5E</td><td class="normal border nowrap">20 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load. (Was probably intended for use with castle BG flame generator.)</td></tr>
<tr><td class="normal border nowrap">$7E:0F72</td><td class="normal border nowrap">20 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Miscellaneous cluster sprite table. It could theoretically be used for any purpose, but in the original SMW, it holds the index of each individual Boo in a Boo ring (00-09).  It is also used in the death bat ceiling to keep track of the bats' Y position.</td></tr>
<tr><td class="normal border nowrap">$7E:0F86</td><td class="normal border nowrap">20 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Miscellaneous cluster sprite table, used for various purposes including determining which Boo ring is which and determining whether or not a particular "death bat" is visible. It could theoretically be used for any purpose.</td></tr>
<tr><td class="normal border nowrap">$7E:0F9A</td><td class="normal border nowrap">20 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Seems to be a miscellaneous cluster sprite table. It could theoretically be used for any purpose, but in the original SMW, its purposes are as a timer for determining when "death bats" will fly, and as a timer to freeze a boo in the boo ceiling.</td></tr>
<tr><td class="normal border nowrap">$7E:0FAE</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Low byte of the angle of the boo ring. $0FAE is for the first Boo ring active; $0FAF is for the second.</td></tr>
<tr><td class="normal border nowrap">$7E:0FB0</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">High byte of the angle of the circle, of the boo ring. $0FB0 is for the first Boo ring active; $0FB1 is for the second.</td></tr>
<tr><td class="normal border nowrap">$7E:0FB2</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Low byte of the X position of the center of a Boo ring. $0FB2 is for the first Boo ring active; $0FB3 is for the second.</td></tr>
<tr><td class="normal border nowrap">$7E:0FB4</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">High byte of the X position of the center of a Boo ring. $0FB4 is for the first Boo ring active; $0FB5 is for the second.</td></tr>
<tr><td class="normal border nowrap">$7E:0FB6</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Low byte of the Y position of the center of a Boo ring. $0FB6 is for the first Boo ring active; $0FB7 is for the second.</td></tr>
<tr><td class="normal border nowrap">$7E:0FB8</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">High byte of the Y position of the center of a Boo ring. $0FB8 is for the first Boo ring active; $0FB9 is for the second.</td></tr>
<tr><td class="normal border nowrap">$7E:0FBA</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Offscreen flag for the Boo ring. If a byte is set to 01, the ring is offscreen and doesn't show up. $0FBA is for the first Boo ring active; $0FBB is for the second.</td></tr>
<tr><td class="normal border nowrap">$7E:0FBC</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Indexes for the Boo cluster sprites that make up Boo rings.  $0FBC is for one Boo ring active, while $0FBD is for the other.  They are used to index the 2-byte tables from $0FAE-$0FBB, although they seem rather pointless due to $18BA.</td></tr>
<tr><td class="normal border nowrap">$7E:0FBE</td><td class="normal border nowrap">1,024 bytes</td><td class="normal border nowrap">Pointer</td><td class="normal border">16-bit pointer table, indexed by Map16 tile number*2. Points to the image to use for a certain Map16 tile. Usually starts with $8000 or $9100 and the value counts up with 8 per 2 RAM addresses. Bank byte should be $0D.</td></tr>
<tr><td class="normal border nowrap">$7E:13BE</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Item Memory settings from header</td></tr>
<tr><td class="normal border nowrap">$7E:13BF</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Translevel number, set during transfer from world map to level. This identifies the first room of the current level. To convert this to a room number (the "level number" in Lunar Magic), if &gt; $24, then add $DC.<br>
<br>
The actual formula is more complex. If translevel number &gt; $24, then subtract $24. Then check RAM $7E:1F11 or $7E:1F12. If the player is in a submap (not the big world map), then add $100. The submaps of Super Mario World use translevel numbers &gt; $24, and the big map uses numbers &lt;= $24, so the simplication is that $100 - $24 is $DC.</td></tr>
<tr><td class="normal border nowrap">$7E:13C0</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:13C1</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Overworld</td><td class="normal border">Current overworld tile the player is standing on.</td></tr>
<tr><td class="normal border nowrap">$7E:13C2</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:13C3</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Overworld</td><td class="normal border">Current player's submap (0 = Main Map, 1 = Yoshi's, 2 = Vanilla, 3 = Forest, 4 = Bowser's, 5 = Special, 6 = Star)</td></tr>
<tr><td class="normal border nowrap">$7E:13C4</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:13C5</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Increases each time a 3UP moon is collected, serves no other purpose. (Its value is never loaded originally.)</td></tr>
<tr><td class="normal border nowrap">$7E:13C6</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Used by SMW's cutscenes. It's from 1-8 and go in the order of the boss battles, e.g. 01 = Iggy's castle, 02 = Morton's castle and 08 = Credits</td></tr>
<tr><td class="normal border nowrap">$7E:13C7</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Yoshi colour (4=yellow, 6=blue, 8=red, A=green - refreshes on level change)</td></tr>
<tr><td class="normal border nowrap">$7E:13C8</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared on reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:13C9</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Show "Continue/End menu on the Overworld" flag</td></tr>
<tr><td class="normal border nowrap">$7E:13CA</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Show Save Prompt on the overworld flag. It actually triggers when you get on a new level tile.</td></tr>
<tr><td class="normal border nowrap">$7E:13CB</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">This has been left out in the current SMW version.<br>
<br>
When you hit a goal tape, and spawn a starman (which is never), this is set to $01. Now each time you switch an area in a level, this gets multiplied by 2. When this reaches $80 (changed area 7 times), you will start the area with the star power. The instructions which sets this address to $01 is located at $00:FB5C.</td></tr>
<tr><td class="normal border nowrap">$7E:13CC</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">The value you store here is the amount of coins that are being added up to the total. Usually, $13CC is either #$00 or #$01, but it can be set to other values too.</td></tr>
<tr><td class="normal border nowrap">$7E:13CD</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">"Don't activate the midway point when you touch it" flag</td></tr>
<tr><td class="normal border nowrap">$7E:13CE</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Midway Point flag</td></tr>
<tr><td class="normal border nowrap">$7E:13D2</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Multi-purpose flag. Used, for example, for when the level ending flag is set, it acts similarly to when the ! Switches are pressed if value != $00.<br>
On the OW, it will temporarily spawn ! blocks.<br>
(#$01 for Yellow, #$02 for Blue, #$03 for Red and #$04 for Green, all others unused).</td></tr>
<tr><td class="normal border nowrap">$7E:13D3</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Timer that disables Start from flipping the Pause flag, if value isn't 0.</td></tr>
<tr><td class="normal border nowrap">$7E:13D4</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Pause flag (Levels) and look around the overworld flag (Overworld). [01] activates the flag.</td></tr>
<tr><td class="normal border nowrap">$7E:13D6</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Amount of time to wait until the score-increasing drumroll begins when you beat a level.  Any time you enter a level, this address is set to x50.  Once you beat the level and the number of bonus stars you won and the score is displayed (or just the score if you didn't cut the goal tape), this timer will decrement itself once per frame.  Once it reaches a negative value or 0, the drumroll will begin. <br>
Once the drumroll ends, this is set to x30, and then set to x0 upon going to the overworld.  It serves the same purpose after you beat a boss as well.</td></tr>
<tr><td class="normal border nowrap">$7E:13D7</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Overworld</td><td class="normal border">Y speed for the intro march (walking to Yoshi's House). It's in fractions. The higher the value, the lower the speed.</td></tr>
<tr><td class="normal border nowrap">$7E:13D9</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">"Cause Mario event" on the OW. Probably used when mario just beat a level, the events are activated, etc.<br>
01 -mario goes down whatever path is available (used when just loading OW after finishing a level, to show events and then make mario walk down them?)<br>
02 - Freeze mario, does nothing.<br>
03 - Makes mario face the direction he wants to go<br>
04 - acts like mario just beat the level, aside from activating events.<br>
05 - Same as 02<br>
06 - fade in/out<br>
07 - switches between mario and luigi (even on 1 player)<br>
08 - Same as 06<br>
09 -  fades to black.<br>
0A - Fades in/out like when you enter a new area<br>
0B - Activates star warp, if no star warp on that tile warps to closest pipe/star etc<br>
0C - Causes mario to slowly walk forward like he does when you enter the OW for the first time<br>
<br>
Also used by level end:<br>
00 - Show up the course clear stuff<br>
01 - Keep it on the screen?<br>
02 - Count down timer/convert to score<br>
03 - Do nothing</td></tr>
<tr><td class="normal border nowrap">$7E:13DA</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Accumulating fraction bits for fixed point Mario X speed.</td></tr>
<tr><td class="normal border nowrap">$7E:13DB</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Mario Walking Frame Counter. <br>
<br>
While walking, it increments to the values in the table at $00DC78, then zeros and starts over. Its speed is indexed in the table at $00DC7C. <br>
<br>
Not only is it used to control Mario's walking/running animation speed, but also which frame Mario's Y position moves up or down one pixel while walking (see $00E35D).</td></tr>
<tr><td class="normal border nowrap">$7E:13DC</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Accumulating fraction bits for fixed point Mario Y speed.</td></tr>
<tr><td class="normal border nowrap">$7E:13DD</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Pose used when player is turning around. Uses same format as $13E0.</td></tr>
<tr><td class="normal border nowrap">$7E:13DF</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Cape Image</td></tr>
<tr><td class="normal border nowrap">$7E:13E0</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario Image</td></tr>
<tr><td class="normal border nowrap">$7E:13E1</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Determines what kind of slope you are on. It's also set when flying with a cape. Possible values are:<br>
<br>
$00 - Not on any Slope<br>
$08 - Gradual Slope Left<br>
$10 - Gradual Slope Right<br>
$18 - Normal Slope Left<br>
$20 - Normal Slope Right<br>
$28 - Steep Slope Left<br>
$30 - Steep Slope Right<br>
$58 - Very Steep Slope Left<br>
$60 - Very Steep Slope Right<br>
$68 - Swooping Down while Flying and Facing Left<br>
$70 - Swooping Down while Flying and Facing Right</td></tr>
<tr><td class="normal border nowrap">$7E:13E2</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Spinjump fireball timer. It increments every frame. If any of the first four bits are set, Mario won't shoot a fireball. If bit 4 ($10) is set, it shoots a fireball. </td></tr>
<tr><td class="normal border nowrap">$7E:13E3</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario is wall-running flag.<br>
0=not wall-running<br>
2=on bottom left (45� angle)<br>
3=on bottom right (45� angle)<br>
4=on top left (45� angle, on top of the wall)<br>
5=on top right (45� angle, on top of the wall)<br>
6=on the left wall<br>
7=on the right wall<br>
Note that custom blocks doesn't work while wall-running!</td></tr>
<tr><td class="normal border nowrap">$7E:13E4</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario Dash Timer. Increases by $02 every frame Mario is walking (and on the ground) with the Dash button held, decrements until at $00 otherwise. $70 indicates Max Running Speed, and means you are ready to take off with the cape.</td></tr>
<tr><td class="normal border nowrap">$7E:13E6</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset, titlescreen, OW and level load.</td></tr>
<tr><td class="normal border nowrap">$7E:13E8</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Set to $01 if the game is suppose to run the cape spin interaction with sprite</td></tr>
<tr><td class="normal border nowrap">$7E:13E9</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">Determines X position of cape interaction inside the level (relative to screen 0, not the visible part). It's adjusted when the cape attack is used.</td></tr>
<tr><td class="normal border nowrap">$7E:13EB</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">Determines Y position of cape interaction inside the level (relative to screen 0, not the visible part). It's adjusted when the cape attack is used.</td></tr>
<tr><td class="normal border nowrap">$7E:13ED</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Player's image on a slope. Is $1C when sliding, and $00 when walking.</td></tr>
<tr><td class="normal border nowrap">$7E:13EE</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">This address has to do with sliding on slopes. It tells what kind of slope he's on.<br>
<br>
If Mario's not on a slope, it's zero.<br>
<br>
If he is, it will be:<br>
FC = Very Steep Slope Left<br>
FD = Steep Slope Left<br>
FE = Normal Slope Left<br>
FF = Gradual Slope Left<br>
01 = Gradual Slope Right<br>
02 = Normal Slope Right<br>
03 = Steep Slope Right<br>
04 = Very Steep Slope Right<br>
<br>
(This is what Lunar Magic calls these slopes)</td></tr>
<tr><td class="normal border nowrap">$7E:13EF</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario is on ground flag. Is only set to #$01 if touching the floor, and ignores touching sides, ceilings, and running up walls. Does not work correctly in blocks. (Except for sprite offsets for some reason. -Meaning, a custom block can only detect if Mario is on the ground/in air when a sprite is touching it but not Mario touching it.)</td></tr>
<tr><td class="normal border nowrap">$7E:13F1</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Vertical Scroll enable flag.</td></tr>
<tr><td class="normal border nowrap">$7E:13F3</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">When you get a P-balloon, this is set to 9. Each frame afterwards, this is decremented until it gets to 1, at which point Mario begins to show his inflated frame.</td></tr>
<tr><td class="normal border nowrap">$7E:13F4</td><td class="normal border nowrap">5 bytes</td><td class="normal border nowrap">Blocks</td><td class="normal border">A byte assigned to each row of blocks in the coin bonus game.  Updated as blocks are chosen by Mario to decide whether a life is given or not.</td></tr>
<tr><td class="normal border nowrap">$7E:13F9</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Mario goes behind stuff flag</td></tr>
<tr><td class="normal border nowrap">$7E:13FB</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario is frozen flag. This includes controls and animation. Other sprites still move and can interact with Mario, but cause the game to mess up if they touch him. This may be useful for cutscenes to eliminate the jumping sound.</td></tr>
<tr><td class="normal border nowrap">$7E:13FD</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">When the R or L triggers are pressed this address gets set to 01 which briefly freezes the screen while the screen scrolls in whatever direction you pressed.</td></tr>
<tr><td class="normal border nowrap">$7E:13FE</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">02 = scroll right, 04 = scroll left. Is used when L/R is pressed.</td></tr>
<tr><td class="normal border nowrap">$7E:13FF</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">The player's direction ($76) times 2.  Used in the L/R screen-scrolling routine to determine where the screen will stop.</td></tr>
<tr><td class="normal border nowrap">$7E:1401</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Amount of time you need to press the L/R button to be able to scroll the screen.</td></tr>
<tr><td class="normal border nowrap">$7E:1402</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Blocks</td><td class="normal border">A flag that is set when Mario is on a note block that is currently going down. (i.e. the bounce sprite is moving downwards)</td></tr>
<tr><td class="normal border nowrap">$7E:1403</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Tide settings for current layer 3 image<br>
00 - Not a tide image<br>
01 - Water level changes<br>
02 - Water level doesn't change</td></tr>
<tr><td class="normal border nowrap">$7E:1404</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">A cape flag. Seems to be set when the player lands on the top of a slope while landing, but it doesn't seem to have a real purpose.</td></tr>
<tr><td class="normal border nowrap">$7E:1405</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Indicates that the player is just about to warp to another level via a pipe.  It is set as soon as $88 reaches 0, and it is used in determining how to draw Yoshi when he is in a pipe (as a boolean value).</td></tr>
<tr><td class="normal border nowrap">$7E:1407</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario is flying actions:<br>
$01 = Low-gravity?<br>
$03 = Horizontal handling?<br>
$06 = Smash the ground and kill stuff.<br>
</td></tr>
<tr><td class="normal border nowrap">$7E:140A</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Cleared during part of the cape flight routine, but doesn't really seem to have a purpose.</td></tr>
<tr><td class="normal border nowrap">$7E:140B</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Unused RAM.</td></tr>
<tr><td class="normal border nowrap">$7E:140D</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Spin Jump flag</td></tr>
<tr><td class="normal border nowrap">$7E:140F</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Keeps increasing as long as you are in the Reznor boss battle room. Likely to be used as a flag to determine which OAM index the smoke tiles coming from Mario's feet should have.</td></tr>
<tr><td class="normal border nowrap">$7E:1410</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Yoshi Has Wings flag # 1. The value 02 enables it. This doesn't handle the flying ability.</td></tr>
<tr><td class="normal border nowrap">$7E:1411</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Horizontal scroll settings from header flag. If clear, disable horizontal scrolling. Else, enable horizontal scrolling.</td></tr>
<tr><td class="normal border nowrap">$7E:1412</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Vertical scroll settings from header</td></tr>
<tr><td class="normal border nowrap">$7E:1413</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Horizontal scroll setting (0 = None, 1 = Constant, 2 = Variable)</td></tr>
<tr><td class="normal border nowrap">$7E:1414</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Vertical scroll setting (0 = None, 1 = Constant, 2 = Variable, 3 = Slow)</td></tr>
<tr><td class="normal border nowrap">$7E:1419</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Somewhat of a "Sprites go behind stuff" flag.<br>
00-No effect<br>
01-Any sprite Mario is holding will go behind objects (includes riding Yoshi)<br>
02-Same as 0x01, but the sprite has the same XY coordinates as Mario.</td></tr>
<tr><td class="normal border nowrap">$7E:141A</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Counter that increments every time a new level is entered (with a door or pipe) - this enables you to distinguish the 'mother'-level from sublevels. Note: Don't enter a new level 256 times, or a glitch will occur.</td></tr>
<tr><td class="normal border nowrap">$7E:141C</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Secret Goal Sprite flag (not checked in vertical levels)</td></tr>
<tr><td class="normal border nowrap">$7E:141D</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Disable Mario Start! Flag</td></tr>
<tr><td class="normal border nowrap">$7E:141E</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Yoshi has wings flag.  The only possible value for this address in the original is #$02, but setting to #$01 will allow Mario to throw fireballs if on Yoshi (even if he is not Firey Mario)</td></tr>
<tr><td class="normal border nowrap">$7E:1420</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Yoshi Coins collected. Does not affect status bar.</td></tr>
<tr><td class="normal border nowrap">$7E:1421</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Counter used by the invisible 1up checkpoint (starts from 0, increases after touching each block)</td></tr>
<tr><td class="normal border nowrap">$7E:1422</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Amount of Yoshi Coins to display on the status bar. (Values 01-04 will make it display any.)</td></tr>
<tr><td class="normal border nowrap">$7E:1423</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Indicates which switch palace switch is being pressed.  Its value also varies depending on which side of the switch was pressed.  (Left side -&gt; it uses the first value, right side -&gt; it uses the second.) 01/02 = green, 05/06 = yellow, 09/0A = blue, 0D/0E = red.</td></tr>
<tr><td class="normal border nowrap">$7E:1425</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Bonus game - If set, Mario will be sent to the bonus game when you change areas in the level.</td></tr>
<tr><td class="normal border nowrap">$7E:1426</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Message Box Trigger (1=Message 1, 2=Message 2, 3=Yoshi thanks message)</td></tr>
<tr><td class="normal border nowrap">$7E:1427</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Bowser clown car image.<br>
00-Regular<br>
01-Blinking<br>
02-Hurt<br>
03-Angry face<br>
Above: cycles through above.</td></tr>
<tr><td class="normal border nowrap">$7E:142A</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Where Mario has to be on the screen in order to justify moving the screen. If Mario's screen xpos is less than $142A - #$0C, then the screen will move left. If Mario's screen xpos is greater than or equal to $142A + #$0C, the screen will move right.</td></tr>
<tr><td class="normal border nowrap">$7E:1433</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Scaling factor of the growing circle before the Titlescreen starts.<br>
Starts at 0, circle gets bigger when the value increases.<br>
Loads titlescreen when value becomes #$F0 or higher.<br>
Also used for the keyhole.</td></tr>
<tr><td class="normal border nowrap">$7E:1434</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Set to #$30 to end level via keyhole</td></tr>
<tr><td class="normal border nowrap">$7E:1435</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Keyhole growing/shrinking flag.</td></tr>
<tr><td class="normal border nowrap">$7E:1436</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Keyhole X position.</td></tr>
<tr><td class="normal border nowrap">$7E:1438</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Keyhole Y position.</td></tr>
<tr><td class="normal border nowrap">$7E:143A</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">When set to a non-zero value, it will load the "Mario Start!" tiles (Mario  GFX will be replaced with the letters)</td></tr>
<tr><td class="normal border nowrap">$7E:143B</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Death Message. $1D = "Time up!" Message. $14 = "Game Over" Message</td></tr>
<tr><td class="normal border nowrap">$7E:143C</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Death Message Animation timer.<br>
<br>
(For example, when "Game" and "Over" come to each other like this: Game --&gt; &lt;--Over)</td></tr>
<tr><td class="normal border nowrap">$7E:143D</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">How long the Death Message lasts timer.</td></tr>
<tr><td class="normal border nowrap">$7E:143E</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Scrolling command number. Basically the sprite value you find in Lunar Magic - #$E7. 0F-FF are incompatible.</td></tr>
<tr><td class="normal border nowrap">$7E:1440</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">The starting Y-position of the current scroll sprite, left-shifted twice, with the extra bits added to them.</td></tr>
<tr><td class="normal border nowrap">$7E:1442</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Various flags used in the Yoshi's House portion of the credits scene. Possible values:<br>
$00 = Mario and companion walks in<br>
$01 = Various Yoshis duck and watch in excitement.<br>
$02 = Eggs are shattering, one by one.<br>
$03 = Yoshis get up and "THANK YOU" appears on Yoshi's house.<br>
$04 = Yoshis jump in excitement, then screen fades out.<br>
24-bit pointers for these actions are located at SNES $0C:A1DE<br>
Also used in the castle destruction sequence:<br>
$00 = Mario walks in, hits the switch and the fuse goes down<br>
$01 = The frame the fuse hits the castle<br>
$02 = "BOMB"<br>
$03 = The frame "BOMB" stops<br>
$04 = Castle falling<br>
$05 = Rest of sequence</td></tr>
<tr><td class="normal border nowrap">$7E:1443</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Castle destruction sequence text timer. Starts at xFF when the 'Welcome' music starts, and a new line of text appears every x20 frames after that. (xDF, xBF, x9F, ect.)</td></tr>
<tr><td class="normal border nowrap">$7E:1446</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Speed to give the player when he's touching the side of a screen, during a level which does not have regular Layer 1 scrolling. Values are different depending on the type of (auto-)scroll.</td></tr>
<tr><td class="normal border nowrap">$7E:1448</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Layer 3 Y speed at the staff roll in the credits. $0000-$7FFF = Upwards, $8000-$FFFF = Downwards.</td></tr>
<tr><td class="normal border nowrap">$7E:144D</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Time until you can press a button to end the castle destruction sequence.</td></tr>
<tr><td class="normal border nowrap">$7E:1460</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Layer 3 scrolling direction</td></tr>
<tr><td class="normal border nowrap">$7E:1462</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Layer 1 X position (level) (16-bit)</td></tr>
<tr><td class="normal border nowrap">$7E:1464</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Layer 1 Y position (level) (16-bit)</td></tr>
<tr><td class="normal border nowrap">$7E:1466</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Layer 2 X position(level)</td></tr>
<tr><td class="normal border nowrap">$7E:1468</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Layer 2 Y position(level)</td></tr>
<tr><td class="normal border nowrap">$7E:1470</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Carrying something flag</td></tr>
<tr><td class="normal border nowrap">$7E:1471</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Determines what type of platform you are on. I.E., 01 is for the floating rock. It enables you to jump and run in the air. Followed by a sinking effect. The same effect you get when standing on a floating rock. This is on Yoshi's Island 4 stage.</td></tr>
<tr><td class="normal border nowrap">$7E:147A</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Position of the left border of the window that the spotlight creates. Goes from ~13-71 and decrements/increments by 3 every 3 frames.</td></tr>
<tr><td class="normal border nowrap">$7E:147C</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Position of the right border of the window that the spotlight creates. Goes from ~8F-EB and decrements/increments by 3 every 3 frames.</td></tr>
<tr><td class="normal border nowrap">$7E:148B</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Output of random number generation routine, located at $01:ACF9.</td></tr>
<tr><td class="normal border nowrap">$7E:148D</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Used by random number generation subroutine to determine the next output.</td></tr>
<tr><td class="normal border nowrap">$7E:148F</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Flag used to detect if Mario holds an object.</td></tr>
<tr><td class="normal border nowrap">$7E:1490</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Star timer ($FF=16 (hex) sec on game timer)</td></tr>
<tr><td class="normal border nowrap">$7E:1491</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Amount of pixels on the X/Y axis a sprite has moved in the current frame.  It is set after every call to update sprite position based on speed, and the routine that updates both X/Y position based on speed will leave $1491 with the movement on the X axis in this address.  Very often used for rideable sprites as this address can be added to mario's position to move Mario in tandem with the sprite.</td></tr>
<tr><td class="normal border nowrap">$7E:1492</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Mario Peace Image (level finished march) timer.</td></tr>
<tr><td class="normal border nowrap">$7E:1493</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">End level timer. Setting to FF will end the level as a goal sphere; however, this is a timer. If your code always sets this address, then it will never end.<br>
Setting it to 01 (even repeatly) will make it flash with ugly colors and end the level.</td></tr>
<tr><td class="normal border nowrap">$7E:1495</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Something related about the fadeout after you defeat a boss. Seems to stop increasing when it reaches $40.</td></tr>
<tr><td class="normal border nowrap">$7E:1496</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario Hurt Frame Timer</td></tr>
<tr><td class="normal border nowrap">$7E:1497</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Flashing Invincible Timer</td></tr>
<tr><td class="normal border nowrap">$7E:1498</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Time to show Mario's Ducking while holding an item pose.</td></tr>
<tr><td class="normal border nowrap">$7E:1499</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Timer for Mario to face the screen.</td></tr>
<tr><td class="normal border nowrap">$7E:149A</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Time to show Mario's kicking Pose.</td></tr>
<tr><td class="normal border nowrap">$7E:149B</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Time for Mario to change through palettes (Used for fire animation)</td></tr>
<tr><td class="normal border nowrap">$7E:149C</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Time to show Mario shooting a fireball pose (Includes in air and on ground)</td></tr>
<tr><td class="normal border nowrap">$7E:149D</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Side flipping climbing net sprite flag and timer. Whenever you punch the flipping net, this gets set to #$1E and decrements every frame till it's zero. That's how many frames the spinning animation lasts. It also determines the X speed the player has while he's on the climbing net sprite - this means that it should be decremented every frame in order to avoid issues.</td></tr>
<tr><td class="normal border nowrap">$7E:149E</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Mario punches while climbing on a net flag and timer. Every time you punch a net this is set to #$09 and decremented till it's zero again. During the time it's not zero the punching a net Mario frame is displayed. If you store #$09 or greater to it every frame you'll be hold onto the net without being able to move or get off.<br>
While this RAM address is non-zero, Mario also can't move.</td></tr>
<tr><td class="normal border nowrap">$7E:149F</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">This timer controls the player's ability to fly with a cape. #$00 and #$01 = disable flight. #$02 = go into bounce flight. #$03-#$FF = Rise up into the air indefinately after a run and jump.<br>
Everytime you run and jump off the ground this timer is set to #$50 and decremented every frame till it's #$00. Or if you spin jump it stops at #$02</td></tr>
<tr><td class="normal border nowrap">$7E:14A0</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Is set to $10 when the player is running and is supposed to display the running images.</td></tr>
<tr><td class="normal border nowrap">$7E:14A1</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">"Player slides a bit when turning around" timer.</td></tr>
<tr><td class="normal border nowrap">$7E:14A5</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Is set to $10 when Mario is flying in the air with a cape.</td></tr>
<tr><td class="normal border nowrap">$7E:14A6</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Cape spin timer.</td></tr>
<tr><td class="normal border nowrap">$7E:14A7</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Timer for breaking the bridge in Reznor battles. (Not to be confused with $1B9F.) It is set to 40 and decrements. When it reaches 3C, a tile on each side breaks. When it drops to 00, it immediately is reset to 40 again.</td></tr>
<tr><td class="normal border nowrap">$7E:14A8</td><td class="normal border nowrap">3 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Unused, and decrement every frame automatically until they reaches 00.</td></tr>
<tr><td class="normal border nowrap">$7E:14AB</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Bonus game ending timer. Does nothing in a normal level, but during a bonus game, setting it will end the bonus game and return to the overworld. At 44 it starts the "end bonus game" music, and at 01 it actually fades to the overworld. </td></tr>
<tr><td class="normal border nowrap">$7E:14AC</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Unused, but decrements every frame automatically until it hits 00.</td></tr>
<tr><td class="normal border nowrap">$7E:14AD</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Blue POW Timer</td></tr>
<tr><td class="normal border nowrap">$7E:14AE</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Silver POW Timer</td></tr>
<tr><td class="normal border nowrap">$7E:14AF</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">On/Off Switch Value. 00 is ON and all others are OFF.</td></tr>
<tr><td class="normal border nowrap">$7E:14B0</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Initial X position of the swinging platform currently being processed, plus 0x18.</td></tr>
<tr><td class="normal border nowrap">$7E:14B2</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Initial Y position of the swinging platform currently being processed, plus 0x68.<br>
Used when Bowser is scaling (before the flames fall out of the sky).<br>
0 = shrinking<br>
1 = growing<br>
2 = disappear</td></tr>
<tr><td class="normal border nowrap">$7E:14B4</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Initial X position of the swinging platform currently being processed, plus 0x68.</td></tr>
<tr><td class="normal border nowrap">$7E:14B8</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">X position of the first (outermost) chain tile of the swinging platform currently being processed.  Writing to it doesn't seem to affect the movement of the platform, though.</td></tr>
<tr><td class="normal border nowrap">$7E:14BA</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Y position of the first (outermost) chain tile of the swinging platform currently being processed.  Writing to it doesn't seem to affect the movement of the platform, though.</td></tr>
<tr><td class="normal border nowrap">$7E:14C8</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite Status Table.<br>
00=Non-existant<br>
01=Initial<br>
02=Killed, falling off screen<br>
03=Smushed<br>
04=Spinjumped<br>
05=Sinking in lava<br>
06=Turn into coin at lvl end<br>
07=Stay in Yoshi's mouth<br>
08=Normal routines<br>
09=Stationary/Carryable<br>
0A=Kicked<br>
0B=Carried<br>
0C=Powerup from being carried past goaltape.</td></tr>
<tr><td class="normal border nowrap">$7E:14D4</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite Ypos High Byte (table)</td></tr>
<tr><td class="normal border nowrap">$7E:14E0</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite Xpos High Byte (table)</td></tr>
<tr><td class="normal border nowrap">$7E:14EC</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Accumulating fraction bits for fixed point Y speed.</td></tr>
<tr><td class="normal border nowrap">$7E:14F8</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Accumulating fraction bits for fixed point X speed.</td></tr>
<tr><td class="normal border nowrap">$7E:1504</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite table that is not restricted to one predefined purpose. Is used as e.g. throw timer.</td></tr>
<tr><td class="normal border nowrap">$7E:1510</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Misc. sprite table apparently.  Used in the brown platform's graphics routine but nowhere else in SMW's entire code.</td></tr>
<tr><td class="normal border nowrap">$7E:151C</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite table that is not restricted to one predefined purpose. Is used for vertical direction in SMW, and Yoshi uses it to determine which sprite to spawn out of an egg. $1520-$1523 is a 'Reznor killed flag'. If a byte is set to $01, the Reznor will disappear. Byte 1 is for Reznor 1, Byte 2 for Reznor 2 and so on.</td></tr>
<tr><td class="normal border nowrap">$7E:1528</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite table that is not restricted to one predefined purpose. In SMW it's used for Chargin' Chuck HP, Thwomp's face expression, etc.</td></tr>
<tr><td class="normal border nowrap">$7E:1534</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite table that does not affect most of the common sprites. It's a table that is not restricted to one predefined purpose.<br>
<br>
Certain powerups use this table as a blink-fall flag:<br>
$00 =&gt; off.<br>
$01 =&gt; on, powerup will blink and fall straight down.<br>
<br>
The game stores $01 here when it drops the reserved item from the item box. The blink-fall flag affects the Super Mushroom and the Fire Flower, but not the Cape Feather. The blink-fall flag also affects some other sprites, at least the Starman, the 1up Mushroom and the sprite-coin (from fireballing enemies), but these sprites might glitch if you set the flag.<br>
One glitch is that the blinking sprite-coin permanently occupies a sprite slot if it falls off the level, so might prevent the spawning of other common sprites.<br>
<br>
This table might also have an unknown affect to a few other sprites. Value $01 seems to cause Super Koopas to flash their capes (but not to give feathers).</td></tr>
<tr><td class="normal border nowrap">$7E:1540</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite table that is not restricted to one predefined purpose. This table already decrements by itself once per frame.<br>
<br>
Some sprites use this table as a stun timer. For example, this timer controls when flipped Goombas and squashed Mecha-Koopas decide to rise and walk. This table is also the Sprite Spin Jump Death Frame Counter.</td></tr>
<tr><td class="normal border nowrap">$7E:154C</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Time to disable sprite's contact with Mario. If that function is not used, it's a table with no predefined purpose. This table already decrements by itself once per frame.</td></tr>
<tr><td class="normal border nowrap">$7E:1558</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Timer for how long the sprite should sink in lava, and various other things. However, if not using these features, it's merely a table with no predefined purpose. This table already decrements by itself once per frame.</td></tr>
<tr><td class="normal border nowrap">$7E:1564</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Time to disable sprite's contact with other sprites. This table already decrements by itself once per frame.</td></tr>
<tr><td class="normal border nowrap">$7E:1570</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite table that does not have a predefined purpose. In SMW, it's used as a frame counter for timed lifts (amount of frames until it hits zero), a frame counter that indicates when sprites 00-13 that have the 'Follow player' flag set should turn, etc.</td></tr>
<tr><td class="normal border nowrap">$7E:157C</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite table that is not restricted to one predefined purpose. Often used as horizontal sprite direction table (0=Right, 1=Left)</td></tr>
<tr><td class="normal border nowrap">$7E:1588</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite blocked status table. Format: xxxxUDLR.</td></tr>
<tr><td class="normal border nowrap">$7E:1594</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite table that has no predefined purpose. (Read: Can be used for any purpose.) In classic Piranha Plants, it is used to check if the sprite should be made visible and have interaction with Mario. (If it's any non-zero value, it will become invisible.)</td></tr>
<tr><td class="normal border nowrap">$7E:15A0</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite off screen flag, horizontal</td></tr>
<tr><td class="normal border nowrap">$7E:15AC</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite table that is not restricted to one predefined purpose. This table already decrements by itself once per frame. In SMW, it is often used as a timer to determine how long it takes to turn around.</td></tr>
<tr><td class="normal border nowrap">$7E:15B8</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Determines what kind of slope a sprite is on.  Possible values:<br>
FC = very steep slope left<br>
FD = steep slope left<br>
FE = normal slope left<br>
FF = gradual slope left<br>
00 = flat ground (or in the air)<br>
01 = gradual slope right<br>
02 = normal slope right<br>
03 = steep slope right<br>
04 = very steep slope right</td></tr>
<tr><td class="normal border nowrap">$7E:15C4</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">A table which is set to $01 if the sprite in question is off-screen. For example, the rings of the Ball 'n' Chain are never drawn if this is a non-zero value.</td></tr>
<tr><td class="normal border nowrap">$7E:15D0</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite Being Eaten Flag Table</td></tr>
<tr><td class="normal border nowrap">$7E:15DC</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Table Related to sprite interaction with objects. Set and the sprite falls through objects.</td></tr>
<tr><td class="normal border nowrap">$7E:15E8</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Unused RAM. Resets everytime you fade out to the overworld.</td></tr>
<tr><td class="normal border nowrap">$7E:15E9</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite index for the current sprite that is being processed.</td></tr>
<tr><td class="normal border nowrap">$7E:15EA</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite's index to OAM</td></tr>
<tr><td class="normal border nowrap">$7E:15F6</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite Palette/GFX High Byte Table - (Tile#Hi - 2) + 2 * (Palette# - 8). YXPPCCCT format.</td></tr>
<tr><td class="normal border nowrap">$7E:1602</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite table that is not restricted to one predefined purpose. Often used as graphics pointer.</td></tr>
<tr><td class="normal border nowrap">$7E:160E</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite table that has no predefined purpose. In SMW, it is used to keep track of things such as the green bouncing Koopa's Y speed and the sprite number of certain spawned, kicked, etc. sprites.</td></tr>
<tr><td class="normal border nowrap">$7E:161A</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite's index to level table - set to FF to prevent from reloading it once it goes offscreen</td></tr>
<tr><td class="normal border nowrap">$7E:1626</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Consecutive enemies killed by a sprite table. Each byte is how many sprites that particular sprite has killed.</td></tr>
<tr><td class="normal border nowrap">$7E:1632</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite Interaction Disable Flag</td></tr>
<tr><td class="normal border nowrap">$7E:163E</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite table that is not restricted to one predefined purpose. This table already decrements by itself once per frame.</td></tr>
<tr><td class="normal border nowrap">$7E:164A</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite Follower Table (0=None, 1-7F=Clouds, 80-FF=Fire)</td></tr>
<tr><td class="normal border nowrap">$7E:1656</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite properties, first Tweaker/MWR byte.<br>
Format: sSjJcccc<br>
s=Disappear in cloud of smoke<br>
S=Hop in/kick shells<br>
j=Dies when jumped on<br>
J=Can be jumped on<br>
cccc=Object clipping</td></tr>
<tr><td class="normal border nowrap">$7E:1662</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite properties, second Tweaker/MWR byte.<br>
Format: dscccccc<br>
d=Falls straight down when killed<br>
s=Use shell as death frame<br>
cccccc=Sprite clipping</td></tr>
<tr><td class="normal border nowrap">$7E:166E</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite properties, third Tweaker/MWR byte.<br>
Format: lwcfpppg<br>
l=Don't interact with layer 2<br>
w=Disable water splash<br>
c=Disable cape killing<br>
f=Disable fireball killing<br>
ppp=Palette<br>
g=Use second graphics page</td></tr>
<tr><td class="normal border nowrap">$7E:167A</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite properties, fourth Tweaker/MWR byte.<br>
Format: dpmksPiS<br>
d=Don't use default interaction with Mario<br>
p=Gives power-up when eaten by Yoshi<br>
m=Process interaction with Mario every frame<br>
k=Can't be kicked like a shell<br>
s=Don't change into a shell when stunned<br>
P=Process while off screen<br>
i=Invincible to star/cape/fire/bouncing bricks<br>
S=Don't disable clipping when killed with star</td></tr>
<tr><td class="normal border nowrap">$7E:1686</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite properties, fifth Tweaker/MWR byte.<br>
Format: dnctswye<br>
d=Don't interact with objects<br>
n=Spawns a new sprite<br>
c=Don't turn into a coin when goal passed<br>
t=Don't change direction if touched<br>
s=Don't interact with other sprites<br>
w=Weird ground behavior<br>
y=Stay in Yoshi's mouth<br>
e=Inedible</td></tr>
<tr><td class="normal border nowrap">$7E:1692</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite Memory setting from header</td></tr>
<tr><td class="normal border nowrap">$7E:1693</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Blocks</td><td class="normal border">Block # in block code (low byte; high byte is Y register)</td></tr>
<tr><td class="normal border nowrap">$7E:1697</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Consecutive enemies stomped</td></tr>
<tr><td class="normal border nowrap">$7E:1698</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Used as index to minor extended sprites.</td></tr>
<tr><td class="normal border nowrap">$7E:1699</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Block Bounce Sprite Image Table / Block Bounce sprite number</td></tr>
<tr><td class="normal border nowrap">$7E:169D</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Block Bounce Sprite ? Table</td></tr>
<tr><td class="normal border nowrap">$7E:16A1</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Block Bounce Sprite Ypos Low Byte Table</td></tr>
<tr><td class="normal border nowrap">$7E:16A5</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Block Bounce Sprite Xpos Low Byte Table</td></tr>
<tr><td class="normal border nowrap">$7E:16A9</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Block Bounce Sprite Ypos High Byte Table</td></tr>
<tr><td class="normal border nowrap">$7E:16AD</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Block Bounce Sprite Xpos High Byte Table</td></tr>
<tr><td class="normal border nowrap">$7E:16B1</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Block Bounce Sprite YSpeed Table</td></tr>
<tr><td class="normal border nowrap">$7E:16B5</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Block Bounce Sprite XSpeed Table</td></tr>
<tr><td class="normal border nowrap">$7E:16C1</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Block Bounce Sprite Turns Into Table</td></tr>
<tr><td class="normal border nowrap">$7E:16C5</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Block Bounce Sprite Bouncing Flag Table</td></tr>
<tr><td class="normal border nowrap">$7E:16C9</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Block Bounce Sprite Table that handles whether the sprite is on Layer 1 or Layer 2/3</td></tr>
<tr><td class="normal border nowrap">$7E:16CD</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Block Bounce Sprite Exists Flag Table</td></tr>
<tr><td class="normal border nowrap">$7E:16E1</td><td class="normal border nowrap">6 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Score/1up Sprite Type (table)<br>
#$00: None<br>
#$01: 10 points<br>
#$02: 20 points<br>
#$03: 40 points<br>
#$04: 80 points<br>
#$05: 100 points<br>
#$06: 200 points<br>
#$07: 400 points<br>
#$08: 800 points<br>
#$09: 1000 points<br>
#$0A: 2000 points<br>
#$0B: 4000 points<br>
#$0C: 8000 points<br>
#$0D: 1UP<br>
#$0E: 2UP<br>
#$0F: 3UP<br>
#$10: 5UP</td></tr>
<tr><td class="normal border nowrap">$7E:16E7</td><td class="normal border nowrap">6 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Score/1up sprite Ypos low byte (table)</td></tr>
<tr><td class="normal border nowrap">$7E:16ED</td><td class="normal border nowrap">6 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Score/1up Sprite X-pos low byte (table)</td></tr>
<tr><td class="normal border nowrap">$7E:16F3</td><td class="normal border nowrap">6 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Score/1up Sprite X-pos high byte (table)</td></tr>
<tr><td class="normal border nowrap">$7E:16F9</td><td class="normal border nowrap">6 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Score/1up Sprite Y-pos, high byte (table)</td></tr>
<tr><td class="normal border nowrap">$7E:16FF</td><td class="normal border nowrap">6 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Score/1up Sprite Movement/Speed (table)</td></tr>
<tr><td class="normal border nowrap">$7E:1705</td><td class="normal border nowrap">6 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Score/1up Sprite Inital Ypos (table)</td></tr>
<tr><td class="normal border nowrap">$7E:170B</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Type of extended sprite (0-12):<br>
01 - Puff of smoke with various objects<br>
02 - reznor fireball<br>
03 - flame left by hopping flame<br>
04 - hammer<br>
05 - mario fireball<br>
06 - bone<br>
07 - Lava Splash (doesn't hurt, parabolic down)<br>
08 - Torpedo Ted shooter's arm<br>
09 - Red thing that flickers from 16x16 to 8x8<br>
0A - coin from cloud game<br>
0B - piranha fireball<br>
0C - lava lotus fire<br>
0D - baseball<br>
0E - Flower of Wiggler<br>
0F - Trail of smoke<br>
10 - Spin Jump star<br>
11 - yoshi fireballs<br>
12 - Water bubble</td></tr>
<tr><td class="normal border nowrap">$7E:1713</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball 2 Status (0=Doesn't Exist, 1=Hit Something, 5=Exists)</td></tr>
<tr><td class="normal border nowrap">$7E:1714</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball 1 Status (0=Doesn't Exist, 1=Hit Something, 5=Exists)</td></tr>
<tr><td class="normal border nowrap">$7E:1715</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Extended sprite Y position, Low Byte</td></tr>
<tr><td class="normal border nowrap">$7E:171D</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball 2 Ypos Low Byte</td></tr>
<tr><td class="normal border nowrap">$7E:171E</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball 1 Ypos Low Byte</td></tr>
<tr><td class="normal border nowrap">$7E:171F</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Extended sprite X position, Low Byte</td></tr>
<tr><td class="normal border nowrap">$7E:1727</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball 2 Xpos Low Byte</td></tr>
<tr><td class="normal border nowrap">$7E:1728</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball 1 Xpos Low Byte</td></tr>
<tr><td class="normal border nowrap">$7E:1729</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Extended sprite Y position, High Byte</td></tr>
<tr><td class="normal border nowrap">$7E:1731</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball 2 Ypos High Byte</td></tr>
<tr><td class="normal border nowrap">$7E:1732</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball 1 Ypos High Byte</td></tr>
<tr><td class="normal border nowrap">$7E:1733</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Extended sprite X position, high byte</td></tr>
<tr><td class="normal border nowrap">$7E:173B</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball 2 Xpos High Byte</td></tr>
<tr><td class="normal border nowrap">$7E:173C</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball 1 Xpos High Byte</td></tr>
<tr><td class="normal border nowrap">$7E:173D</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Extended sprite Y speed</td></tr>
<tr><td class="normal border nowrap">$7E:1745</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball Y Speed (2nd fireball)</td></tr>
<tr><td class="normal border nowrap">$7E:1746</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball Y Speed (First Fireball)</td></tr>
<tr><td class="normal border nowrap">$7E:1747</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Extended sprite X speed</td></tr>
<tr><td class="normal border nowrap">$7E:174F</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball #2 X Speed</td></tr>
<tr><td class="normal border nowrap">$7E:1750</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball #1 X Speed (Default is 3 for right, $FD for left)</td></tr>
<tr><td class="normal border nowrap">$7E:175B</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball Hit Flag Table</td></tr>
<tr><td class="normal border nowrap">$7E:1763</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset, titlescreen load, OW load and level load.</td></tr>
<tr><td class="normal border nowrap">$7E:1765</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Extended sprite table. Most extended sprites increment this table and use it for their GFX table. (Use a different image every x frames.)</td></tr>
<tr><td class="normal border nowrap">$7E:176F</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball Hit Frame Counter Table</td></tr>
<tr><td class="normal border nowrap">$7E:1779</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Extended sprite goes behind stuff flag.</td></tr>
<tr><td class="normal border nowrap">$7E:1781</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball 2 Goes Behind Stuff Flag</td></tr>
<tr><td class="normal border nowrap">$7E:1782</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Fireball 1 Goes Behind Stuff Flag</td></tr>
<tr><td class="normal border nowrap">$7E:1783</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Shooter number table. (Bullet Bill shooter = #$01, Torpedo Launcher = #$02.)</td></tr>
<tr><td class="normal border nowrap">$7E:178B</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Related to the Y position of a shooter (low byte)</td></tr>
<tr><td class="normal border nowrap">$7E:1793</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Related to the Y position of a shooter (high byte)</td></tr>
<tr><td class="normal border nowrap">$7E:179B</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Related to the X position of a shooter (low byte)</td></tr>
<tr><td class="normal border nowrap">$7E:17A3</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Related to the X position of a shooter (high byte)</td></tr>
<tr><td class="normal border nowrap">$7E:17AB</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Amount of time it takes for a shooter to shoot the next sprite.</td></tr>
<tr><td class="normal border nowrap">$7E:17B3</td><td class="normal border nowrap">8 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Table which holds the index for 'sprite being reloaded' for the table at $1938, for shooters. Shooters are always reloaded.</td></tr>
<tr><td class="normal border nowrap">$7E:17BE</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">How much layer 2 moved compared to the previous frame. Used when Mario should be still compared to a moving L2 (used for the L2 horizontal scroll sprite, E4).</td></tr>
<tr><td class="normal border nowrap">$7E:17C0</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Smoke images.<br>
00=Nothing<br>
01=Puff of smoke<br>
02=Contact graphic<br>
03=Smoke when Mario turns around abruptly<br>
04=None<br>
05=Glitter sprite</td></tr>
<tr><td class="normal border nowrap">$7E:17C4</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Y low position of smoke images.</td></tr>
<tr><td class="normal border nowrap">$7E:17C8</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">X low position of smoke images.</td></tr>
<tr><td class="normal border nowrap">$7E:17CC</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Amount of time to show the smoke image.</td></tr>
<tr><td class="normal border nowrap">$7E:17D0</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">"Spinning coin coming out of ? block" table. It's a free slot if it's zero.</td></tr>
<tr><td class="normal border nowrap">$7E:17D4</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Y position of spinning coin from a ? block (low byte).</td></tr>
<tr><td class="normal border nowrap">$7E:17D8</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Y speed of spinning coin spawned by ? block. $20-$9F will erase the sprite.</td></tr>
<tr><td class="normal border nowrap">$7E:17DC</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Accumulating fraction bits of Y speed of spinning coin spawned by ? block.</td></tr>
<tr><td class="normal border nowrap">$7E:17E0</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">X position of spinning coin from a ? block (low byte).</td></tr>
<tr><td class="normal border nowrap">$7E:17E4</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Table for spinning coin from a ? block. Value depends on whether the block is processed on Layer 1 or Layer 2 - the bounce sprite / smoke image will adjust its position relative to the layer in which it is processed.</td></tr>
<tr><td class="normal border nowrap">$7E:17E8</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Y position of spinning coin from a ? block (high byte).</td></tr>
<tr><td class="normal border nowrap">$7E:17EC</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">X position of spinning coin from a ? block (high byte).</td></tr>
<tr><td class="normal border nowrap">$7E:17F0</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Minor Extended Sprites type.<br>
00=None<br>
01=Piece of brick block<br>
02=Small star<br>
03=Cracked shell (Yoshi egg)<br>
04=Fireball from Podoboo<br>
05=Small star?<br>
06=Rip van Fish Z tile<br>
07=Water splash<br>
08=Rip van Fish Z tile (unused)<br>
09=Rip van Fish Z tile (unused)<br>
0A=Boo Stream tile<br>
0B=Unused Yoshi smoke</td></tr>
<tr><td class="normal border nowrap">$7E:17FC</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Minor Extended Sprite's Y position, low.</td></tr>
<tr><td class="normal border nowrap">$7E:1808</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Minor Extended Sprite's X position, low.</td></tr>
<tr><td class="normal border nowrap">$7E:1814</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Minor Extended Sprite's Y position, high.</td></tr>
<tr><td class="normal border nowrap">$7E:1820</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Minor Extended Sprite's Y speed.</td></tr>
<tr><td class="normal border nowrap">$7E:182C</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Minor Extended Sprite's X speed.</td></tr>
<tr><td class="normal border nowrap">$7E:1838</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Accumulating fraction bits for fixed point minor extended sprite Y speed.</td></tr>
<tr><td class="normal border nowrap">$7E:1844</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Accumulating fraction bits for fixed point minor extended sprite X speed.</td></tr>
<tr><td class="normal border nowrap">$7E:1850</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Minor Extended Sprite timer, how long it stays active.</td></tr>
<tr><td class="normal border nowrap">$7E:185C</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario falls through interactive layers flag.</td></tr>
<tr><td class="normal border nowrap">$7E:185D</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Related to the spawning of extended sprites. Used to index $17F0 (minor extended sprite type table) if there are no empty slots when an extended sprite needs to be spawned. This is so that the oldest extended sprite can be removed when a new one needs to be made.</td></tr>
<tr><td class="normal border nowrap">$7E:185E</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sometimes used to keep track of a tile to generate at $00BEB0 (before storing to $9C). Also used to determine Y position of Mario when he's on the line guided rope, used to determine positions and such of Yoshi's tiles, etc.</td></tr>
<tr><td class="normal border nowrap">$7E:185F</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">This is the low byte of the Map16 tile (actual tile number, not "acts like" setting) that a sprite is touching vertically.<br>
<br>
This is set after $019138, the subroutine that allows the sprite to interact with objects, is called.  (This includes $01802A, the routine that updates the sprite's position with gravity, which calls $019138.)</td></tr>
<tr><td class="normal border nowrap">$7E:1860</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">This is the low byte of the Map16 tile (actual tile number, not "acts like" setting) that a sprite is touching horizontally.<br>
<br>
This is set after $019138, the subroutine that allows the sprite to interact with objects, is called.  (This includes $01802A, the routine that updates the sprite's position with gravity, which calls $019138.)</td></tr>
<tr><td class="normal border nowrap">$7E:1861</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Which sprite to overwrite if all slots are full. Used for blocks containing sprites and the item box.</td></tr>
<tr><td class="normal border nowrap">$7E:1862</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">This is the high byte of the Map16 tile (actual tile number, not "acts like" setting) that a sprite is touching horizontally.<br>
<br>
This is set after $019138, the subroutine that allows the sprite to interact with objects, is called.  (This includes $01802A, the routine that updates the sprite's position with gravity, which calls $019138.)</td></tr>
<tr><td class="normal border nowrap">$7E:186B</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Blocks</td><td class="normal border">Multiple Coin Block timer. Set to 01  and the block becomes unused instantly. Set to FF for maximum time length.</td></tr>
<tr><td class="normal border nowrap">$7E:186C</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite off screen flag, vertical</td></tr>
<tr><td class="normal border nowrap">$7E:1878</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Indicates where the player is on the X axis in relation to the currently-active revolving net door sprite.  If this is 00, the player is perfectly centered on the sprite horizontally.  It will be positive if the player is toward the left side of the sprite (the farther left, the bigger the positive number) and negative if the player is toward the right side of the sprite (the farther right, the bigger the negative number).<br>
<br>
Is used to calculate the player's X speed as the net is turning around sideways.</td></tr>
<tr><td class="normal border nowrap">$7E:187A</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Riding Yoshi Flag (0=No, 1 or 2=Yes)</td></tr>
<tr><td class="normal border nowrap">$7E:187B</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite Stomp Immunity Flag Table. The changing item sprite uses it to determine which sprite it is. (#$00 = mushroom, #$40 = fire flower, #$80 = feather, #$C0 = star).<br>
Also used for things such as determining whether the goal tape should use the normal exit or the secret one, to hold the radius of rotating chain sprites, handling Yoshi abilities, etc.  Most likely a miscellaneous sprite table with no predefined purpose.</td></tr>
<tr><td class="normal border nowrap">$7E:1887</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Time to shake ground</td></tr>
<tr><td class="normal border nowrap">$7E:1888</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Layer 1 Image Y position, used by RAM $7E1887 (Shake ground)</td></tr>
<tr><td class="normal border nowrap">$7E:188A</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared on death, level load, and in the Peach Rescued scene (not sure about details here).</td></tr>
<tr><td class="normal border nowrap">$7E:188B</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Something related about Mario's Image Y position, used by RAM $7E1887 (Shake Ground)</td></tr>
<tr><td class="normal border nowrap">$7E:1890</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">How many 1UPs to spawn. (Used for bonus game.)</td></tr>
<tr><td class="normal border nowrap">$7E:1891</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">P-balloon's timer</td></tr>
<tr><td class="normal border nowrap">$7E:1892</td><td class="normal border nowrap">20 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Cluster sprites type. 00 = None (free slot), 01 = 1UP (bonus game), 02 = Unused (Would crash if used), 03 = Boo from ghost ceiling, 04 = Boo from Boo ring, 05 = castle candle flame, 06 = Sumo Brother flame, 07 = Reappearing ghost, 08 = Death bat. The pointer for those is at $02F825.</td></tr>
<tr><td class="normal border nowrap">$7E:18AC</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Yoshi Swallow Frame Counter/Status</td></tr>
<tr><td class="normal border nowrap">$7E:18AE</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">State pointer/timer for Yoshi's tounge. Writing a non-zero value to it makes Yoshi's tounge appear. The highest used value is 06 - this is when Yoshi is about to pull his tongue out.</td></tr>
<tr><td class="normal border nowrap">$7E:18AF</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Yoshi squatting timer.</td></tr>
<tr><td class="normal border nowrap">$7E:18B0</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Yoshi's Current X position. Used to determine where Yoshi is when eating a berry.</td></tr>
<tr><td class="normal border nowrap">$7E:18B2</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Yoshi's Current Y Position. Used to determine where Yoshi is when eating a berry.</td></tr>
<tr><td class="normal border nowrap">$7E:18B6</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sometimes used to keep track of a tile to generate at $00BEB0 (before storing to $9C); may be in conjunction with $185E. Also used to determine X position of Mario when he's on the line guided rope, used when Mario is on top of Boo Block, etc.</td></tr>
<tr><td class="normal border nowrap">$7E:18B7</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset, titlescreen load, OW load and level load.</td></tr>
<tr><td class="normal border nowrap">$7E:18B8</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">If clear, cluster sprite code does not run.</td></tr>
<tr><td class="normal border nowrap">$7E:18B9</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Shooter type of sprite. 00 - Eerie Generator, 01 = Para Goomba and so on. The pointer for this address is located at $02/B00C (SNES).</td></tr>
<tr><td class="normal border nowrap">$7E:18BA</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Determines amount of Boo rings per screen. Depending on bit 0 of this byte, the reappearing ghosts use position combination 1 or 2.</td></tr>
<tr><td class="normal border nowrap">$7E:18BB</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset, titlescreen load, OW load and level load.</td></tr>
<tr><td class="normal border nowrap">$7E:18BC</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Floating skulls activation flag. Is set to 0x0C when Mario touches the sprite, and is reset in the sprite's INIT routine.</td></tr>
<tr><td class="normal border nowrap">$7E:18BD</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Time to stun mario.  Mario will face the screen and be unable to move.</td></tr>
<tr><td class="normal border nowrap">$7E:18BE</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Related to Mario climbing. If &gt; #$01, climbs if pressing up.</td></tr>
<tr><td class="normal border nowrap">$7E:18BF</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Timer used by a bunch of appearing/disappearing sprites (examples: Lakitu, Magikoopa, and Layer 3 smasher). Sprite D2 freezes it.</td></tr>
<tr><td class="normal border nowrap">$7E:18C0</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Timer for respawning certain sprites, such as the Boo Buddies of sprite E5 (and Lakitu).  Sprite D2, Turn Off Generator 2, sets this to 00 when it is active.</td></tr>
<tr><td class="normal border nowrap">$7E:18C1</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Used by Magikoopa and Lakitu to determine which sprite number to respawn.</td></tr>
<tr><td class="normal border nowrap">$7E:18C2</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Mario is standing normal flag. Set above #$01 and his image stays at normal, but can still move.</td></tr>
<tr><td class="normal border nowrap">$7E:18C3</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Y position of the respawning sprite, used with $18C0 and $18C1.</td></tr>
<tr><td class="normal border nowrap">$7E:18CD</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Used as (alternative) index to bounce sprites.</td></tr>
<tr><td class="normal border nowrap">$7E:18CE</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Timer</td><td class="normal border">Indicates how long each spinning turn block should still be spinning. When this timer is at 0, the spinning turn block turns back into a normal turn block.</td></tr>
<tr><td class="normal border nowrap">$7E:18D2</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">This address is increased every time mario kills a sprite with a star while the star is active and will reset when the star runs out. <br>
00 = 200<br>
01 = 400<br>
02 = 800<br>
03 = 1000<br>
04 = 2000<br>
05 = 4000<br>
06 = 8000<br>
07 and above = 1up</td></tr>
<tr><td class="normal border nowrap">$7E:18D4</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Red berries eaten</td></tr>
<tr><td class="normal border nowrap">$7E:18D5</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Pink berries eaten.</td></tr>
<tr><td class="normal border nowrap">$7E:18D6</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Berry Type (0=Coin (no eggs), 1=Red, 2=Pink Berry, 3=Green)</td></tr>
<tr><td class="normal border nowrap">$7E:18D7</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">This is the high byte of the Map16 tile (actual tile number, not "acts like" setting) that a sprite is touching vertically.<br>
<br>
This is set after $019138, the subroutine that allows the sprite to interact with objects, is called.  (This includes $01802A, the routine that updates the sprite's position with gravity, which calls $019138.)</td></tr>
<tr><td class="normal border nowrap">$7E:18D9</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">How far the castle door is open in the castle intro screen.</td></tr>
<tr><td class="normal border nowrap">$7E:18DA</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Sprite number that spawns when yoshi lays an egg. Is set to 78 normally (1up).</td></tr>
<tr><td class="normal border nowrap">$7E:18DB</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Set to 08 at $00CDD4 (unreachable by default) and never touched again. Was probably intended as a starting index for the player's fireballs.<br>
<br>
Clears during fadeouts.</td></tr>
<tr><td class="normal border nowrap">$7E:18DC</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Flag that is set when Yoshi gets his tongue out while ducking. Yoshi cannot turn around in this state. If you were to use the debug codes at $00D085-$00D089 (x5285 - x5289), this also makes the fireballs that the player fires when on Yoshi appear at a different position.</td></tr>
<tr><td class="normal border nowrap">$7E:18DD</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Number of silver coins collected.</td></tr>
<tr><td class="normal border nowrap">$7E:18DE</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Yoshi laying eggs timer.</td></tr>
<tr><td class="normal border nowrap">$7E:18E2</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Lose Yoshi Flag (if set, any Yoshis spawned become 1ups instead)</td></tr>
<tr><td class="normal border nowrap">$7E:18E4</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">1up Handler Address: Write a number to give that many lives. Handles everything except '1up' sprite.</td></tr>
<tr><td class="normal border nowrap">$7E:18E5</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Timer for the 1up handler ($18E4).</td></tr>
<tr><td class="normal border nowrap">$7E:18E7</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Yoshi ground stomp flag.  (This is set to #$01 for a Yellow Yoshi or Yoshi with a yellow shell)</td></tr>
<tr><td class="normal border nowrap">$7E:18E8</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Yoshi growing animation timer. Additionally, it freezes everything on the screen except Yoshi.</td></tr>
<tr><td class="normal border nowrap">$7E:18EA</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Minor Extended Sprite's X position, high.</td></tr>
<tr><td class="normal border nowrap">$7E:18F7</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite index to $16E1.</td></tr>
<tr><td class="normal border nowrap">$7E:18F8</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Time for a bounce sprite to interact with a normal sprite.  Starts at 06 and decrements.</td></tr>
<tr><td class="normal border nowrap">$7E:18FC</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Extended sprite index.  Holds the first available extended sprite index and resets to 07 if all of them have been filled and another extended sprite is spawned.</td></tr>
<tr><td class="normal border nowrap">$7E:18FD</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Flag set when Whistlin' Chuck whistles.</td></tr>
<tr><td class="normal border nowrap">$7E:18FE</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">The diagonal and surrounded bullet bills timer. It increments every frame, and when it reaches A0, it sends out some more bullet bills and resets itself.</td></tr>
<tr><td class="normal border nowrap">$7E:18FF</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Shooter index for the current shooter that is being processed.</td></tr>
<tr><td class="normal border nowrap">$7E:1900</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Star Points Gained at level end (decrements to 0)</td></tr>
<tr><td class="normal border nowrap">$7E:1901</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">YXPPCCCT data of bounce sprite that is being shown.</td></tr>
<tr><td class="normal border nowrap">$7E:1905</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Iggy's Platform holds the total number of tilts made counter. It will increment everytime the platform will be at a maximum tilt.</td></tr>
<tr><td class="normal border nowrap">$7E:1906</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Iggy's platform stationary phase counter. It will stop rotating the platform when you set it to anything higher than $01, and will stay so until it decrements to $00.</td></tr>
<tr><td class="normal border nowrap">$7E:1907</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Iggy's platform rotation phase counter. Resets when it is about to reach $06.</td></tr>
<tr><td class="normal border nowrap">$7E:1908</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset, titlescreen load, OW load and level load.</td></tr>
<tr><td class="normal border nowrap">$7E:1909</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Flag that makes the creating/eating block run or not run. FF = don't run, any other value (00) = run. Is set when a brown block is touched.</td></tr>
<tr><td class="normal border nowrap">$7E:190A</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Reappearing Boo frame counter.  They start appearing at FF, become fully opaque at DF, start disappearing at 3F, and become fully invisible at 1F.  The counter decrements every frame and doesn't stop when it hits 00 unless sprite D2 is active, which causes it to freeze at FF.</td></tr>
<tr><td class="normal border nowrap">$7E:190B</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Big Boo Boss palette index, used for the transparency effect.</td></tr>
<tr><td class="normal border nowrap">$7E:190C</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Directional coin timer.</td></tr>
<tr><td class="normal border nowrap">$7E:190E</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite buoyancy settings from level header. Format: XY00 0000 (bits)<br>
X = Enable sprite buoyancy, but reduces the number of sprites that can be on the screen at once without slowing down.<br>
Y = Enable sprite buoyancy, but disables all other sprite interaction with layer 2 to reduce the processing cost and slowdown.</td></tr>
<tr><td class="normal border nowrap">$7E:190F</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite properties, sixth Tweaker/MWR byte.<br>
Format: wcdj5sDp<br>
w=Don't get stuck in walls (carryable sprites)<br>
c=Don't turn into a coin with silver POW<br>
d=Death frame 2 tiles high<br>
j=Can be jumped on with upward Y speed<br>
5=Takes 5 firebals to kill<br>
s=Can't be killed by sliding<br>
D=Don't erase when goal passed<br>
p=Make platform passable from below</td></tr>
<tr><td class="normal border nowrap">$7E:191B</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Cleared to zero at $01EBD9 and never touched again.  It was probably intended for use with Yoshi but was never actually used.</td></tr>
<tr><td class="normal border nowrap">$7E:191C</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Yoshi</td><td class="normal border">Indicates whether or not Yoshi has a key in his mouth.  00 = no, 01 = yes.</td></tr>
<tr><td class="normal border nowrap">$7E:191D</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Used as an index for the cluster sprites that make up Sumo Brother flames. Unused in most cases.</td></tr>
<tr><td class="normal border nowrap">$7E:191E</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Is set to a value 00-03 when pressing a big switch. Depending on the value, either green, yellow, blue or red switch sprites will be left behind. (But changing it has no effect other than that.)</td></tr>
<tr><td class="normal border nowrap">$7E:191F</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared on reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:1920</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">How many 1UPs from the bonus game are still not collected. This ends the bonus game when this RAM address is $00, after you hit the spinning thing.</td></tr>
<tr><td class="normal border nowrap">$7E:1925</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Level Mode settings from header</td></tr>
<tr><td class="normal border nowrap">$7E:192A</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Level header RAM address. Format: swaaaaaa. s = slippery level, w = water level, a = Mario action. If one of bits 3-5 are set, Mario action will be Vertical Pipe exit downwards, water level.</td></tr>
<tr><td class="normal border nowrap">$7E:192B</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Sprites</td><td class="normal border">Which Sprite GFX set to use</td></tr>
<tr><td class="normal border nowrap">$7E:192D</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">FG Palette settings from header</td></tr>
<tr><td class="normal border nowrap">$7E:192E</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Sprite Palette settings from header</td></tr>
<tr><td class="normal border nowrap">$7E:192F</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">BG Colour settings from header</td></tr>
<tr><td class="normal border nowrap">$7E:1930</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">BG Colour setting from header</td></tr>
<tr><td class="normal border nowrap">$7E:1931</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Tileset (but also used for some other random stuff...?)</td></tr>
<tr><td class="normal border nowrap">$7E:1932</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Tileset again</td></tr>
<tr><td class="normal border nowrap">$7E:1933</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Layer being processed (0=layer 1, 1=layer 2; used in both level loading routine and processing interactions)</td></tr>
<tr><td class="normal border nowrap">$7E:1938</td><td class="normal border nowrap">128 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Sprite Load Status Table.<br>
Loaded sprites' indices to this table are stored in the sprite table at $7E:161A<br>
All sprites are set to #$00 when the player enters a new area, meaning they are marked to be loaded.<br>
If a sprite's value is set to anything else, it will not reload until the player exits and re-enters the area.</td></tr>
<tr><td class="normal border nowrap">$7E:19B8</td><td class="normal border nowrap">32 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Exit Table. This connects doors and exit-enabled pipes to their correct entrances.<br>
<br>
The index for this exit table is the position of the exit (relative to layer 1) divided by 256. If layer 1 is vertical, then use the Y position of the exit, else use the X position. This is also known as the current screen number.<br>
<br>
For primary exits, the value in this exit table is the low 8 bits of the level number of the destination room. For secondary exits, the value in this exit table is the index to the secondary entrance ROM tables; and ROM table $05:F800 provides the low 8 bits of the room number.</td></tr>
<tr><td class="normal border nowrap">$7E:19D8</td><td class="normal border nowrap">32 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Exit Table, flags + high bit.<br>
Bit 0 = High bit of level # (1=level 1xx, 0=level 0xx)<br>
Bit 1 = Is Secondary Exit Flag<br>
Bit 2 = Is Exit Present Flag (set if any exit is on this screen)<br>
Bit 3 = Make Destination Water Flag (Secondary Exit only)<br>
Bits 4-7 = Unused<br>
<br>
Only used when LM is done with the ROM.</td></tr>
<tr><td class="normal border nowrap">$7E:19F8</td><td class="normal border nowrap">384 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Three tables (128 bytes each) for remembering which items has been taken (item memory settings). 16 bits for each subscreen (X position is used to determine which of those bits is used). Note that item memory 3 propably won't work well!</td></tr>
<tr><td class="normal border nowrap">$7E:1B80</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Overworld</td><td class="normal border">If 0, the player is walking with a regular speed. If 1, the player is walking with climbing speed. 2-FF are unused.</td></tr>
<tr><td class="normal border nowrap">$7E:1B86</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Determines which pointer to use for the routine that runs events. </td></tr>
<tr><td class="normal border nowrap">$7E:1B87</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Seems to be the overworld "continue/quit" image trigger, for when you get a game over and then go to the overworld. The values trigger as follows, although they all are glitchy:<br>
00-04: (Nothing)<br>
05 (play sound and get rid of mario<br>
06 (display words, no functions<br>
07 (Display select thing, which doesn't function <br>
08 (open box again and again<br>
09 open box do not repeat, disappears</td></tr>
<tr><td class="normal border nowrap">$7E:1B88</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Message box expanding (0) or shrinking (1) flag.</td></tr>
<tr><td class="normal border nowrap">$7E:1B89</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Message box expansion and shrinking timer/size. Note: Setting expanding timer above #$04 will cause the message to be blank.</td></tr>
<tr><td class="normal border nowrap">$7E:1B91</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Blinking cursor frame counter (file select, save prompt, etc.)</td></tr>
<tr><td class="normal border nowrap">$7E:1B92</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Blinking cursor position (value 00-03)</td></tr>
<tr><td class="normal border nowrap">$7E:1B93</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Use Secondary Exits flag (likely not used when LM is done with the ROM)</td></tr>
<tr><td class="normal border nowrap">$7E:1B94</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Disable bonus game sprite from being loaded flag. If not zero, the bonus game sprite will terminate itself in the init routine.</td></tr>
<tr><td class="normal border nowrap">$7E:1B95</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">When this flag is set, you will go to the special yoshi levels (C8, or 1C8) at the soonest possible loading time. Does not necessarily mean yoshi has wings. </td></tr>
<tr><td class="normal border nowrap">$7E:1B96</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Side Exit Enabled flag</td></tr>
<tr><td class="normal border nowrap">$7E:1B99</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Used in goal point marching: flag to show peace image flag and handling the fade-out ellipse.</td></tr>
<tr><td class="normal border nowrap">$7E:1B9A</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Level::BG Scroll Activated Flag. Setting it to #$08 activates it.</td></tr>
<tr><td class="normal border nowrap">$7E:1B9B</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">Used to check if Yoshi should not reappear for the next room (castle intro cutscene and the likes). These cutscenes set the flag to #$01, which makes Yoshi not reappear for the next room, but it does keep Yoshi on the overworld. Automatically set to #$00 when the overworld is loaded again. One could use this RAM address to disable Yoshi for one room, but re-enable him in the next again.</td></tr>
<tr><td class="normal border nowrap">$7E:1B9D</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Time to wait after rising/lowering the tide</td></tr>
<tr><td class="normal border nowrap">$7E:1B9F</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border">Timer used for breaking the bridge in Reznor battles.</td></tr>
<tr><td class="normal border nowrap">$7E:1BA0</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Overworld</td><td class="normal border">OW- Triggers shaking the ground. Any value will shake it, FE = valley of bowser entrance fanfare and rumble. never stops until value is set back to 00.</td></tr>
<tr><td class="normal border nowrap">$7E:1BE3</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Layer 3 settings<br>
00 - No Layer 3<br>
01 - Low and high tide<br>
02 - Low tide only<br>
03 - Tileset specific image</td></tr>
<tr><td class="normal border nowrap">$7E:1BE4</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Blocks</td><td class="normal border">VRAM address to start uploading data from 7E1BE6.  Big endian.</td></tr>
<tr><td class="normal border nowrap">$7E:1BE6</td><td class="normal border nowrap">256 bytes</td><td class="normal border nowrap">Blocks</td><td class="normal border">Which tiles should be used for each row of 16x16 tiles, 2 bytes per 8x8 tile, used while updating the screen (loading new tiles). In horizontal levels, $1BE6-$1C65 forms the left column of 8x8 tiles while $1C66 forms the right column of 8x8 tiles. On the OW and in vertical levels, $1BE6-$1C65 forms the upper row of 8x8 tiles, while $1C66-$1CE5 forms the bottom row of 8x8 tiles.</td></tr>
<tr><td class="normal border nowrap">$7E:1CE6</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Blocks</td><td class="normal border">VRAM address to start uploading data from 7E1CE8.  Big endian.</td></tr>
<tr><td class="normal border nowrap">$7E:1CE8</td><td class="normal border nowrap">256 bytes</td><td class="normal border nowrap">Blocks</td><td class="normal border">Same as 7E1BE6, but for layer 2.</td></tr>
<tr><td class="normal border nowrap">$7E:1DE9</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Overworld::Ending enemy presentation screen (Count to 0x0C)</td></tr>
<tr><td class="normal border nowrap">$7E:1DEA</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Overworld</td><td class="normal border">Overworld event to run at level end ($FF=None)</td></tr>
<tr><td class="normal border nowrap">$7E:1DEB</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Overworld</td><td class="normal border">Event tile to load to the overworld. A starting value is set to this at level end, and it increases until it reaches the value of $1DED.</td></tr>
<tr><td class="normal border nowrap">$7E:1DED</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Overworld</td><td class="normal border">Last event tile to load to the overworld during a given event, set at level end.</td></tr>
<tr><td class="normal border nowrap">$7E:1DF0</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Overworld</td><td class="normal border">7E1DF0 - X position of the camera when using the "survey OW w/ select" function, low byte<br>
7E1DF1 - X position of the camera, when using survey function, high byte<br>
(These values are only used to determine which way the camera should go to get back to mario- there is another set for usual movement)</td></tr>
<tr><td class="normal border nowrap">$7E:1DF2</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Overworld</td><td class="normal border">Ypos of the camera when using the "scroll around OW" function.<br>
7E1DF2 = low byte<br>
7E1DF3 = high byte<br>
Note: This is only used when determining how to get back to mario. There must be a different set for when simply scrolling around the screen.</td></tr>
<tr><td class="normal border nowrap">$7E:1DF4</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">Index to intro control sequence data table.</td></tr>
<tr><td class="normal border nowrap">$7E:1DF5</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Frame counter to use the same controller bits for intro sequence. Is also used as timer to determine how long the Nintendo Presents screen will remain active.</td></tr>
<tr><td class="normal border nowrap">$7E:1DF6</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Overworld</td><td class="normal border">StarRoad and Tunnel handler (Map). Controls where you warp to. The values load by adding +2 to the previous one. This is starting from 00 and so on.</td></tr>
<tr><td class="normal border nowrap">$7E:1DF7</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Used by the Star Road Warp Star on the overworld. It is the speed of Mario getting launched in the air during warping. The higher the value, the faster he gets launched in the air.</td></tr>
<tr><td class="normal border nowrap">$7E:1DF8</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Player</td><td class="normal border">Used by the Star Road Warp Star on the overworld. It is how long Mario stays on the ground before he gets launched in the air, during warping. (Timer)</td></tr>
<tr><td class="normal border nowrap">$7E:1DF9</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">I/O</td><td class="normal border">SPC700 I/O Ports (Write values to play music/SFX)</td></tr>
<tr><td class="normal border nowrap">$7E:1DFD</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset, titlescreen, OW and level load.</td></tr>
<tr><td class="normal border nowrap">$7E:1DFF</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">I/O</td><td class="normal border">Seems like it is the copy of $7E1DFB, the music register. Writing to it doesn't give any effect though.</td></tr>
<tr><td class="normal border nowrap">$7E:1E00</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset, titlescreen, OW and level load.</td></tr>
<tr><td class="normal border nowrap">$7E:1E01</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Misc.</td><td class="normal border">If debug code at $00CC86 is enabled, this RAM address allows you to be in free roaming mode: Mario can move in any direction, without being affected by objects or sprites. 00 = none, 01 = dash immediately, 02 = free roaming.</td></tr>
<tr><td class="normal border nowrap">$7E:1E02</td><td class="normal border nowrap">20 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Y low position of cluster sprites.</td></tr>
<tr><td class="normal border nowrap">$7E:1E16</td><td class="normal border nowrap">20 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">X low position of cluster sprites.</td></tr>
<tr><td class="normal border nowrap">$7E:1E2A</td><td class="normal border nowrap">20 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Y high position of cluster sprites.</td></tr>
<tr><td class="normal border nowrap">$7E:1E3E</td><td class="normal border nowrap">20 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">X high position of cluster sprites.</td></tr>
<tr><td class="normal border nowrap">$7E:1E52</td><td class="normal border nowrap">20 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Y position of reappearing Boos, frame 1. Not relative to screen border. Also used as Y speed for Boos from ghost ceiling and death bats.</td></tr>
<tr><td class="normal border nowrap">$7E:1E66</td><td class="normal border nowrap">20 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">X position of reappearing Boos, frame 1. Not relative to screen border. Also used as X speed for Boos from ghost ceiling and death bats.</td></tr>
<tr><td class="normal border nowrap">$7E:1E7A</td><td class="normal border nowrap">20 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Y position of reappearing Boos, frame 2. Not relative to screen border. Also used as accumulating fraction bits for Y speed of death bats.</td></tr>
<tr><td class="normal border nowrap">$7E:1E8E</td><td class="normal border nowrap">20 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">X position of reappearing Boos, frame 2. Not relative to screen border.</td></tr>
<tr><td class="normal border nowrap">$7E:1EA2</td><td class="normal border nowrap">96 bytes</td><td class="normal border nowrap">Overworld</td><td class="normal border">OW Level Setting Flags, location corresponds to $7E13BF. Bits:<br>
01: Enable walking right<br>
02: Enable walking left<br>
04: Enable walking down<br>
08: Enable walking up<br>
10: Save Prompt when level beaten<br>
20: No entry if level passed<br>
40: Midway point<br>
80: Beaten<br>
<br>
Setting $7E:1EEB to hex value $83 will enable the special stage features in ORIGINAL SMW.</td></tr>
<tr><td class="normal border nowrap">$7E:1F02</td><td class="normal border nowrap">15 bytes</td><td class="normal border nowrap">Overworld</td><td class="normal border">Overworld event flags</td></tr>
<tr><td class="normal border nowrap">$7E:1F11</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Overworld</td><td class="normal border">Current submap for Mario (0=Overworld, 1=Yoshi, 2=Vanilla, 3=Forest, 4=Bowser, 5=Special, 6=Star)</td></tr>
<tr><td class="normal border nowrap">$7E:1F12</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Overworld</td><td class="normal border">Current submap for Luigi (0=Overworld, 1=Yoshi, 2=Vanilla, 3=Forest, 4=Bowser, 5=Special, 6=Star) </td></tr>
<tr><td class="normal border nowrap">$7E:1F13</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">Mario's and Luigi's animation on the overworld.<br>
<br>
$00 = Look away from screen<br>
$02 = Face the screen<br>
$04 = Look to the left<br>
$06 = Walk to the right<br>
$08 = Look away from screen in the water<br>
$0A = Face the screen in the water<br>
$0C = Walk to the left in the water<br>
$0E = Walk to the right in the water<br>
$10 = Stick your hand out (entering level)<br>
$12 = Stick your hand out in the water (entering level)<br>
$14 = Climb ladder/vine?<br>
$16 = Climb ladder/vine<br>
<br>
Bytes 1-2 form Mario's image and bytes 3-4 form Luigi's image. Note that the high bytes of the two (bytes 2 and 4, $1F14 and $1F16) are actually unused.</td></tr>
<tr><td class="normal border nowrap">$7E:1F17</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">OW X position of Mario</td></tr>
<tr><td class="normal border nowrap">$7E:1F19</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">OW Y position of Mario</td></tr>
<tr><td class="normal border nowrap">$7E:1F1B</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">OW X position of Luigi</td></tr>
<tr><td class="normal border nowrap">$7E:1F1D</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">OW Y position of Luigi</td></tr>
<tr><td class="normal border nowrap">$7E:1F1F</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">Pointer to Mario's OW Xpos.  Value is Mario's OW Xpos divided by 10 hex.</td></tr>
<tr><td class="normal border nowrap">$7E:1F21</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">Pointer to Mario's OW Ypos.  Value is Mario's OW Ypos divided by 10 hex.</td></tr>
<tr><td class="normal border nowrap">$7E:1F23</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">Luigi's X position in the world map (OW Xpos) divided by 16 (by $10 hex).</td></tr>
<tr><td class="normal border nowrap">$7E:1F25</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Player</td><td class="normal border">Luigi's Y position in the world map (OW Ypos) divided by 16 (by $10 hex).<br>
<br>
All four values from $1F1F, $1F21, $1F23 and $1F25 are always in range from 0 to 31. Thus you may access them as 8-bit or 16-bit values.</td></tr>
<tr><td class="normal border nowrap">$7E:1F27</td><td class="normal border nowrap">4 bytes</td><td class="normal border nowrap">Flag</td><td class="normal border">Switch block flags (Green, Yellow, Blue, Red)</td></tr>
<tr><td class="normal border nowrap">$7E:1F2B</td><td class="normal border nowrap">3 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Cleared at reset, titlescreen load and file load (1/2 Player -&gt; OW / intro screen).</td></tr>
<tr><td class="normal border nowrap">$7E:1F2E</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Counter</td><td class="normal border"># of normal exits gotten</td></tr>
<tr><td class="normal border nowrap">$7E:1F2F</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Flag</td><td class="normal border">"Collected five or more Yoshi Coins" flags.  Each byte represents the values for 8 levels, with each bit acting as a flag for a given level.<br>
<br>
Level # ($13BF) DIVIDED by 8 (LSR x3) provides the BYTE index into this table, since 8 levels are represented by a single byte.  The level # MODULO 8 (AND #$07) is the BIT index into this table.  It will choose a single bit out of the byte and this is the flag for this level.</td></tr>
<tr><td class="normal border nowrap">$7E:1F3B</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:1F3C</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Flag</td><td class="normal border">RAM table handling in which levels the invisible 1up spawning tiles are flagged as 'do not respawn'. This happens after they're collected in that level. 8 levels go in 1 byte ; one bit per level. Order of levels is the same as RAM address $13BF, but then in bits, to compress the amount of space needed. If the bit relative to the level is flagged, the tiles will not respawn. If it's clear, it will respawn.</td></tr>
<tr><td class="normal border nowrap">$7E:1F48</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:1F49</td><td class="normal border nowrap">141 bytes</td><td class="normal border nowrap">Overworld</td><td class="normal border">Buffer for $1EA2-$1F2E. SRAM transfer goes through this buffer.</td></tr>
<tr><td class="normal border nowrap">$7E:1FD6</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Unused sprite table, cleared at individual sprite load. (1 slot each.)</td></tr>
<tr><td class="normal border nowrap">$7E:1FE2</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Time to disable sprite's contact with cape. This table already decrements by itself once per frame.</td></tr>
<tr><td class="normal border nowrap">$7E:1FEE</td><td class="normal border nowrap">12 bytes</td><td class="normal border nowrap">Flag</td><td class="normal border">RAM table handling in which levels the 3UP moons are flagged as 'do not respawn'. This happens after they're collected in that level. 8 levels go in 1 byte ; one bit per level. Order of levels is the same as RAM address $13BF, but then in bits, to compress the amount of space needed. If the bit relative to the level is flagged, the moon will not respawn. If it's clear, it will respawn.</td></tr>
<tr><td class="normal border nowrap">$7E:1FFA</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:1FFB</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Palettes</td><td class="normal border">Lightning Flash Color. Most values are just shades of white, but 70+ is actual colors. Only active while lightning flash is active.</td></tr>
<tr><td class="normal border nowrap">$7E:1FFC</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Lightning Flash Timer. 00- no time, 01- constant, and so on. Only active while lightning flash effect is active.</td></tr>
<tr><td class="normal border nowrap">$7E:1FFD</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Timer</td><td class="normal border">Lightning Flash "Step." 00- step 8, 01, step 7, and so on. Repeats steps 0-8 all the way up to FF. Only active while lightning flash effect is active.</td></tr>
<tr><td class="normal border nowrap">$7E:1FFE</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Flag</td><td class="normal border">If flag is set, the credit cutscene backgrounds will get updated every frame. If clear, they won't.</td></tr>
<tr><td class="normal border nowrap">$7E:1FFF</td><td class="normal border nowrap">1 byte</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty. Cleared during reset and titlescreen load.</td></tr>
<tr><td class="normal border nowrap">$7E:2000</td><td class="normal border nowrap">23,808 bytes</td><td class="normal border nowrap">Graphics</td><td class="normal border">GFX32 decompressed.</td></tr>
<tr><td class="normal border nowrap">$7E:7D00</td><td class="normal border nowrap">12,288 bytes</td><td class="normal border nowrap">Graphics</td><td class="normal border">GFX33 decompressed.</td></tr>
<tr><td class="normal border nowrap">$7E:AD00</td><td class="normal border nowrap">3,072 bytes</td><td class="normal border nowrap">Graphics</td><td class="normal border">GFX file decompression buffer.  Decompressed as 3bpp (3kb) for unexpanded GFX and as 4bpp for expanded.<br>
Also used for LM's extra animated tile space.<br>
$7EB900 is also used as additional buffer kilobyte.</td></tr>
<tr><td class="normal border nowrap">$7E:B900</td><td class="normal border nowrap">1,024 bytes</td><td class="normal border nowrap">Blocks</td><td class="normal border">BG2 tilemap, low byte.</td></tr>
<tr><td class="normal border nowrap">$7E:BD00</td><td class="normal border nowrap">1,024 bytes</td><td class="normal border nowrap">Blocks</td><td class="normal border">BG2 tilemap, high byte. The first seven bytes are used by custom block ASM/ExAnimated Tile GFX.</td></tr>
<tr><td class="normal border nowrap">$7E:C100</td><td class="normal border nowrap">1,408 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty on an unhacked ROM, potentially occupied with extended animated tile graphics in a hacked ROM.<br>
$7EC380-$7EC387 are also used by Mikeyk's SMB3 Pipes:<br>
$7EC380 is Mario's direction (1-up, 2-right, 3-down, 4-left)<br>
$7EC381 is the counter that increments when Mario is touching an exit tile<br>
$7EC382 is the counter that increments when Mario is in a corner piece<br>
$7EC383 is the Mario/Yoshi status (1-small, 2-big, 3-small on yoshi, 4-big on yoshi)<br>
$7EC384 is the target location of corner piece low byte<br>
$7EC385 is the target location of corner piece high byte<br>
$7EC386 is the water level flag<br>
$7EC387 is the time that Mario has entered the pipe</td></tr>
<tr><td class="normal border nowrap">$7E:C680</td><td class="normal border nowrap">96 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Tilemap of Mode 7 bosses (Ludwig, Roy, Morton and Bowser).</td></tr>
<tr><td class="normal border nowrap">$7E:C6E0</td><td class="normal border nowrap">288 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty on an unhacked ROM, potentially occupied with extended animated tile graphics in a hacked ROM.</td></tr>
<tr><td class="normal border nowrap">$7E:C800</td><td class="normal border nowrap">14,336 bytes</td><td class="normal border nowrap">Blocks</td><td class="normal border">Map16 Low Byte Table ($7EFE00-$7EFFFF are unused in horizontal levels, but used in vertical ones). In the overworld, $7ED000-$7ED3FF is used as a table that contains translevel numbers for the big world map (the one with Donut Plains and Chocolate Island). If you divide the map into 16x16 blocks, then this table connects each block to a level. To interpret the value, see RAM $7E:13BF.<br>
To index this table, use RAM $7E:1F1F and $7E:1F21 to find Mario, or use RAM $7E:1F23 and RAM $7E:1F25 to find Luigi.<br>
X position / 16: %0000 0000 000X xxxx<br>
Y position / 16: %0000 0000 000Y yyyy<br>
index to this table: %0000 00YX yyyy xxxx.<br>
$7ED400-$7ED7FF is used for the submaps as a whole and has the same kind of format.</td></tr>
<tr><td class="normal border nowrap">$7F:0000</td><td class="normal border nowrap">3,328 bytes</td><td class="normal border nowrap">Overworld</td><td class="normal border">Layer 2 event tilemap of the overworld.<br>
$7F0B44-$7F1343 are also used as buffer for dynamic sprite graphics (they get uploaded during vblank).</td></tr>
<tr><td class="normal border nowrap">$7F:0D00</td><td class="normal border nowrap">13,056 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty, untouched RAM on a vanilla ROM.  Used to hold expanded layer 2 event tilemap on a hacked ROM.</td></tr>
<tr><td class="normal border nowrap">$7F:4000</td><td class="normal border nowrap">16,384 bytes</td><td class="normal border nowrap">Overworld</td><td class="normal border">The Layer 2 tilemap of the whole overworld (including submaps, starting at $7F:6000). It does NOT affect the event tiles. The tiles are also 8x8. The tilemap starts from the top left corner of the main overworld. Format is as following:<br>
[Tile number], [Tile properties]<br>
Part of this table is also used for a RAM buffer for the credit cutscene backgrounds.</td></tr>
<tr><td class="normal border nowrap">$7F:8000</td><td class="normal border nowrap">387 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Unrolled loop which writes to OAM to set all sprite tiles off screen on each frame</td></tr>
<tr><td class="normal border nowrap">$7F:8183</td><td class="normal border nowrap">504 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty, untouched RAM.<br>
~420 bytes used in LM 1.70+ for VRAM modification</td></tr>
<tr><td class="normal border nowrap">$7F:837B</td><td class="normal border nowrap">2 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Used for indexing the stripe image table</td></tr>
<tr><td class="normal border nowrap">$7F:837D</td><td class="normal border nowrap">5,118 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">VRAM upload table (In stripe image). Not all of it is used during normal gameplay, so $7F8600+ shouldn't be dangerous to use.<br>
$7F8601 is used by Schwa's Pseudo Powerups to determine what powerups Mario has, in Binary;<br>
0x01 = Ice Skates<br>
0x02 = Lava Boots<br>
0x04 = Force Boots<br>
0x08 = Spike Boots<br>
0x10 = Dash Boots<br>
0x20 = Wing Boots<br>
0x40 = Screw Attack<br>
$7F8602 is used by Schwa's Pseudo Powerups to determine if Mario has already used his double-jump before landing (00 = on the ground, 01 = usable, anything else = not usable)<br>
$7F8820 is used by Mikeyk's Ice Power generator<br>
$7F8821 is used by Mikeyk's mushroom block (sprite portion).<br>
$7F8900 (768 bytes) are extra sprite tables used by smwedit's fire chomp, and some by smwedit's chain chomp. The sprite tables can be used by any sprite, but must be initialized or set in the INIT routine.</td></tr>
<tr><td class="normal border nowrap">$7F:977B</td><td class="normal border nowrap">768 bytes</td><td class="normal border nowrap">Misc.</td><td class="normal border">Mario Start, Game Over, Time Up etc. messages Graphics, decompressed.</td></tr>
<tr><td class="normal border nowrap">$7F:9A7B</td><td class="normal border nowrap">512 bytes</td><td class="normal border nowrap">Sprites</td><td class="normal border">Position of Wiggler's segments.</td></tr>
<tr><td class="normal border nowrap">$7F:9C7B</td><td class="normal border nowrap">11,141 bytes</td><td class="normal border nowrap">Empty</td><td class="normal border">Empty, untouched RAM on a clean ROM.<br>
In a hacked ROM:<br>
$7FAB10 (12 bytes) is used by Sprite Tool to check a number of things.<br>
Bit 2 indicates if the first extra bit is set.<br>
Bit 3 indicates if it's a custom sprite.<br>
Bit 7 indicates if it has been initialized.<br>
$7FAB1C (12 bytes) is used by Sprite Tool to indicate whether the sprite being processed uses custom code, maybe for other things?<br>
$7FAB28 (12 bytes) is used by Sprite Tool to indicate the extra property byte 1 from the cfg file<br>
$7FAB34 (12 bytes) is used by Sprite Tool to indicate the extra property byte 2 from the cfg file<br>
$7FAB9E (12 bytes) is used by Sprite Tool to indicate the custom sprite number<br>
<br>
$7FBC00-$7FC7FF area:<br>
Empty on an unhacked ROM, used incrementally for Lunar Magic hacks. More space will be used here as more hacks are changed or added to Lunar Magic.<br>
<br>
In version 1.6x:<br>
$7FC000 : $00A bytes, Misc<br>
<br>
In version 1.70+:<br>
$7FBC00 : $400 bytes, BG data used by VRAM modification<br>
$7FC000 : $1A bytes, Misc<br>
$7FC070 : $8E bytes, new ExAnimation<br>
$7FC300 : $400 bytes, BG data used by VRAM modification</td></tr>
<tr><td class="normal border nowrap">$7F:C800</td><td class="normal border nowrap">14,336 bytes</td><td class="normal border nowrap">Blocks</td><td class="normal border">Map16 High Byte Table in a clean ROM ($7FFE00-$7FFFFF are unused in horizontal levels, but used in vertical ones).<br>
In a hacked ROM, the following are also placed here:<br>
$7FFF00 (32 bytes) is used for LevelNames 2.0 by Ice Man<br>
$7FFFDF (10 bytes) is used by BMF's LevelNames code<br>
$7FFFF0 (10 bytes) is used by FuSoYa's SMB3 Pipe Code.<br>
$7FFFF0 (4 bytes) is used by BMF's LevelASM code<br>
$7FFFF8 (8 bytes) is used by LM demo recording/playing ASM</td></tr>
</tbody></table>
</form>
<br><br>
</center>
                      </td>
	                </tr>
            </tbody></table>
</center></body></html>